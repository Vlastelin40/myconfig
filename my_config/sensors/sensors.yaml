  # - platform: imap_email_content
  #   server: imap.gmail.com
  #   name: DoorCam Motion Sensor
  #   port: 993
  #   username: !secret gmail_username
  #   password: !secret gmail_password
  #   folder: DoorCam
  #   senders:
  #     - !secret doorcam_email
  # - platform: imap
  #   server: imap.gmail.com
  #   name: DoorCam Email Unread
  #   port: 993
  #   username: !secret gmail_username
  #   password: !secret gmail_password
  #   folder: DoorCam
  #   search: !secret search_from_cam

  # - platform: yandex_transport
  #   name: Bus To Home
  #   stop_id: 9639688
  #   routes:
  #     - 22
  #     - 595

#  - platform: authenticated

  # - platform: sql
  #   queries:
  #     - name: Temp Out Yesterday
  #       query: >
  #           SELECT
  #               state
  #           FROM
  #               states
  #           WHERE
  #               entity_id = 'sensor.0x158d0001e8995a_temperature'
  #               and state <> 'unavailable'
  #               and created < DATETIME('NOW','-1 DAY')
  #           ORDER BY state_id DESC
  #           LIMIT 1;
  #       column: 'state'
  #       unit_of_measurement: '°C'
  #   scan_interval: 60

  - platform: modem_callerid
    device: /dev/serial/by-id/usb-U.S.Robotics_USB_Modem_0000003-if00
  
  # - platform: opensky
  #   radius: 3
  #   name: opensky_home
    
  # - platform: opensky
  #   radius: 5
  #   name: opensky_dacha
  #   latitude: !secret dacha_latitude
  #   longitude: !secret dacha_longitude

  # - platform: filter
  #   name: Radiation Dose Filtered 1m
  #   entity_id: sensor.geiger_radiation_dose_per_hour
  #   filters:
  #     - filter: time_simple_moving_average
  #       window_size: "00:01"

  # - platform: filter
  #   name: Radiation Dose Filtered 5m
  #   entity_id: sensor.geiger_radiation_dose_per_hour
  #   filters:
  #     - filter: time_simple_moving_average
  #       window_size: "00:05"

  - platform: mold_indicator
    name: mold_t
    indoor_temp_sensor: sensor.sonoff_pow_r2_2_temperature
    indoor_humidity_sensor: sensor.sonoff_pow_r2_2_humidity
    outdoor_temp_sensor: sensor.esp32_node_mb_outside
    calibration_factor: 2.227848101
    
  - platform: mold_indicator
    name: mold_pipe_t
    indoor_temp_sensor: sensor.esp32_bathroom_node_cold_pipe
    indoor_humidity_sensor: sensor.0x158d0001e58754_humidity
    outdoor_temp_sensor: sensor.esp32_node_mb_outside
    calibration_factor: 2.554146341

  - platform: statistics
    name: Humidity bathroom stats
    entity_id: sensor.0x158d00020d7c3a_humidity
    sampling_size: 86400
    max_age: 
      hours: 24
  
  - platform: derivative
    source: sensor.0x158d00020d7c3a_humidity
    name: Humidity bathroom derivative
    unit_time: min
    time_window: "00:10:00"

  # - platform: statistics
  #   name: Oven Temp Stats
  #   entity_id: sensor.esp8266_oven_temp_k
  #   sampling_size: 30
  #   max_age:
  #     minutes: 5

  # - platform: template
  #   sensors:
  #     oven_temp_change:
  #       value_template: "{{ state_attr('sensor.oven_temp_stats', 'change') }}"
  #       unit_of_measurement: '°C'
  #       device_class: temperature

  - platform: derivative
    source: sensor.oven_temp_stats
    name: Temperature Oven derivative
    unit_time: min
    time_window: "00:05:00"

  - platform: statistics
    name: out_temperature_stats
    entity_id: sensor.esp32_node_mb_outside #sensor.0x158d0001e8995a_temperature
    sampling_size: 6000
    max_age:
      hours: 24
  
  - platform: template
    sensors:
      nextsunrise:
        friendly_name: 'Next Sunrise'
        value_template: >
          {{ as_timestamp(states.sun.sun.attributes.next_rising) | timestamp_custom('%R')  }}
        icon_template: mdi:weather-sunset-up
      nextsunset:
        friendly_name: 'Next Sunset'
        value_template: >
          {{ as_timestamp(states.sun.sun.attributes.next_setting) | timestamp_custom('%R') }}
        icon_template: mdi:weather-sunset-down
        
      temperature_min_out:
        value_template: "{{ state_attr('sensor.out_temperature_stats', 'min_value') }}"
        unit_of_measurement: '°C'
        device_class: temperature

      temperature_max_out:
        value_template: "{{ state_attr('sensor.out_temperature_stats', 'max_value') }}"
        unit_of_measurement: '°C'
        device_class: temperature

      dewpoint_b:
        friendly_name: Dew Point B
        unit_of_measurement: "°C"
        device_class: temperature
        value_template: >
          {% set b = 17.368 %}
          {% set c = 238.88 %}
          {% set a = 6.1121 %}
          {% set rh = states('sensor.0x158d00020d7c3a_humidity') | float %}
          {% set t = states('sensor.0x158d00020d7c3a_temperature') | float %}
          {% set gamma = log(rh / 100) + b * t / (c + t) %}
          {{ (c * gamma / (b - gamma)) | round(1) }}

      dewpoint_t:
        friendly_name: Dew Point T
        unit_of_measurement: "°C"
        device_class: temperature
        value_template: >
          {% set b = 17.368 %}
          {% set c = 238.88 %}
          {% set a = 6.1121 %}
          {% set rh = states('sensor.0x158d0001e58754_humidity') | float %}
          {% set t = states('sensor.0x158d0001e58754_temperature') | float %}
          {% set gamma = log(rh / 100) + b * t / (c + t) %}
          {{ (c * gamma / (b - gamma)) | round(1) }}

  - platform: min_max
    type: mean
    name: Humidity Average
    round_digits: 0
    entity_ids:
      - sensor.0x158d0001e586af_humidity
      - sensor.0x158d0001e58714_humidity
      - sensor.0x158d0001e6d85a_humidity
      - sensor.0x158d000222c746_humidity
      - sensor.0x158d000233fb72_humidity
      - sensor.0x158d0002464ec0_humidity

  - platform: min_max
    type: mean
    name: Temperature Average
    round_digits: 0
    entity_ids:
      - sensor.0x158d0001e586af_temperature
      - sensor.0x158d0001e58714_temperature
      - sensor.0x158d0001e6d85a_temperature
      - sensor.0x158d000222c746_temperature
      - sensor.0x158d000233fb72_temperature
      - sensor.0x158d0002464ec0_temperature

  - platform: template
    sensors:
      zigbee_devices_unavailable:
        friendly_name: Zigbee Devices Unvailable
        value_template: "{{ expand('group.zigbee_devices') | selectattr('state','in',['unavailable','unknown']) | map(attribute='name') | list | count }}"
        icon_template: >
          {% if states('binary_sensor.zigbee_devices_unavailable') == "on" %}
          mdi:signal-off
          {% else %}
          mdi:signal
          {% endif %}
        unit_of_measurement: 'ea'

      wifi_devices_unavailable:
        friendly_name: WiFi Devices Unvailable
        value_template: "{{ expand('group.wifi_devices') | selectattr('state','in',['unavailable','unknown']) | map(attribute='name') | list | count }}"
        icon_template: >
          {% if states('binary_sensor.wifi_devices_unavailable') == "on" %}
          mdi:signal-off
          {% else %}
          mdi:signal
          {% endif %}
        unit_of_measurement: 'ea'

      abs_humidity_b:
        value_template: >-
          {% set h, t = states('sensor.0x158d00020d7c3a_humidity') | float, states('sensor.0x158d00020d7c3a_temperature') %}
          {% if not h or t == 'unknown' -%}
           'unknown'
          {%- else %}
          {% set t = t | float %}
          {{ (h*6.112*2.1674*e**((t*17.67)/(t+243.5))/(t+273.15))|round(2) }}
          {% endif %}
        unit_of_measurement: 'g/m³'
        icon_template: mdi:water-percent
        friendly_name: Absolute Humidity B

      abs_humidity_t:
        value_template: >-
          {% set h, t = states('sensor.0x158d0001e58754_humidity') | float, states('sensor.0x158d0001e58754_temperature') %}
          {% if not h or t == 'unknown' -%}
           'unknown'
          {%- else %}
          {% set t = t | float %}
          {{ (h*6.112*2.1674*e**((t*17.67)/(t+243.5))/(t+273.15))|round(2) }}
          {% endif %}
        unit_of_measurement: 'g/m³'
        icon_template: mdi:water-percent
        friendly_name: Absolute Humidity T

      abs_humidity_h:
        value_template: >-
          {% set h, t = states('sensor.humidity_average') | float, states('sensor.temperature_average') %}
          {% if not h or t == 'unknown' -%}
          'unknown'
          {%- else %}
          {% set t = t | float %}
          {{ (h*6.112*2.1674*e**((t*17.67)/(t+243.5))/(t+273.15))|round(2) }}
          {% endif %}
        unit_of_measurement: 'g/m³'
        icon_template: mdi:water-percent
        friendly_name: Absolute Humidity H

  - platform: command_line
    name: Supervisor updates
    command: 'curl -s http://supervisor/supervisor/info -H "Authorization: Bearer $(printenv SUPERVISOR_TOKEN)" | jq ''{"newest_version":.data.version_latest,"current_version":.data.version,"addons":[.data.addons[] | select(.version != .version_latest)]}'''
    value_template: "{{ value_json.addons | length }}"
    json_attributes:
      - newest_version
      - current_version
      - addons

  - platform: rest
    resource: https://www.cbr-xml-daily.ru/daily_json.js
    name: USD_RUR
    value_template: '{{ value_json.Valute.USD.Value | float | round(2) }}'
    unit_of_measurement: 'RUR'
    scan_interval: 1200

  - platform: rest
    resource: https://www.cbr-xml-daily.ru/daily_json.js
    name: EUR_RUR
    value_template: '{{ value_json.Valute.EUR.Value | float | round(2) }}'
    unit_of_measurement: 'RUR'
    scan_interval: 1200

  - platform: template
    sensors:
      vova_gps_last_update:
        value_template: "{{as_timestamp(states.device_tracker.life360_vova_tsymbal.attributes.last_seen)|timestamp_local}}"
        friendly_name: Vova GPS Last Update
        icon_template: mdi:crosshairs-question
        attribute_templates:
          delta: "{{states('input_number.vova_gps_delta')}}"
      vova_gps_delta:
        value_template: "{{states('input_number.vova_gps_delta')}}"
        friendly_name: Vova GPS Delta
        icon_template: mdi:crosshairs-question
        unit_of_measurement: 'm'

      # restarts_per_day:
      #   friendly_name: Qty Of Restart
      #   value_template: "{{states('counter.restart_counter')|int}}"
      #   unit_of_measurement: 'ea'
        

  # - platform: command_line
  #   name: config_line_count_sh
  #   command: 'bash /config/line_count.sh'
  #   unit_of_measurement: 'lines'
  #   scan_interval: 1800

  # - platform: command_line
  #   name: config_line_count_sh_code
  #   unit_of_measurement: 'lines'
  #   command: 'bash /config/line_count_code.sh'
  #   scan_interval: 1800

  - platform: template
    sensors:
      config_line_count_ratio:
        friendly_name: Config Line Count Usage
        value_template: "{{ (states('sensor.config_line_count_code')|int / states('sensor.config_line_count')|int * 100) | round(0) }}"
        unit_of_measurement: '%'
        icon_template: mdi:brightness-percent

  - platform: mqtt
    name: Config Line Count
    state_topic: "ubuntu/config_linecount"
    qos: 0
    expire_after: 150
    force_update: true
    value_template: "{{ value }}"
    unit_of_measurement: 'lines'
    icon: mdi:format-list-bulleted

  - platform: mqtt
    name: Config Line Count Code
    state_topic: "ubuntu/config_linecount_code"
    qos: 0
    expire_after: 150
    force_update: true
    value_template: "{{ value }}"
    unit_of_measurement: 'lines'
    icon: mdi:format-list-numbered

#  - platform: command_line
#    name: ya_weather_city
#    command: 'bash /config/ya_weather.sh'
#    scan_interval: 120
    
#  - platform: command_line
#    name: ya_weather_work
#    command: 'bash /config/ya_weather_work.sh'
#    scan_interval: 120

#  - platform: command_line
#    name: ya_weather_home
#    command: 'bash /config/ya_weather_home.sh'
#    scan_interval: 120

  - platform: github
    access_token: !secret github_access_token_2
    repositories:
      - path: 'to4ko/myconfig'
        name: myconfig
      # - path: 'AlexxIT/XiaomiGateway3'
      #   name: AlexxIT GW3 Repo

  - platform: statistics
    entity_id: sensor.0x158d000233fb72_pressure
    name: pressure
    max_age:
      minutes: 10
      
  - platform: template
    sensors:
      pressure_gradient:
        friendly_name: Pressure Gradient
        value_template: "{{(state_attr('binary_sensor.pressure_falling_fast','gradient')|float * 3600*100)|int(0)}}"
        icon_template: mdi:chart-line-variant
        unit_of_measurement: 'Pah'

      pressure_gradient_air_valve:
        friendly_name: Pressure Gradient (Air Valve)
        value_template: "{{(state_attr('binary_sensor.pressure_rising_fast_air_valve','gradient')|float * 3600*100)|int(0)}}"
        icon_template: mdi:chart-line-variant
        unit_of_measurement: 'Pah'
      
      pressure_indicator:
        friendly_name: Pressure Indicator
        value_template: >
          {% if is_state('binary_sensor.pressure_falling_fast','on')%} Falling Fast
          {% elif is_state('binary_sensor.pressure_falling_slow','on') and is_state('binary_sensor.pressure_falling_slow','off')%} Falling Slow
          {% elif is_state('binary_sensor.pressure_rising_fast','on')%} Raising Fast
          {% elif is_state('binary_sensor.pressure_rising_slow','on') and is_state('binary_sensor.pressure_rising_fast','off') %} Raising Slow
          {% else %} Stable
          {% endif %}
        icon_template: >
          {% if is_state('binary_sensor.pressure_falling_fast','on')%} mdi:chevron-triple-down
          {% elif is_state('binary_sensor.pressure_falling_slow','on') and is_state('binary_sensor.pressure_falling_slow','off') %} mdi:chevron-down
          {% elif is_state('binary_sensor.pressure_rising_fast','on')%} mdi:chevron-triple-up
          {% elif is_state('binary_sensor.pressure_rising_slow','on') and is_state('binary_sensor.pressure_rising_fast','off') %} mdi:chevron-up
          {% else %} mdi:checkbox-blank-circle-outline
          {% endif %}

  - platform: season
    type: astronomical

# ############################################################################
# External IP sensor
# ############################################################################
#  - platform: rest
#    resource: http://ip.jsontest.com
#    name: External IP
#    value_template: '{{ value_json.ip }}'

  - platform: moon

# ############################################################################
# Template sensors
# ############################################################################
  - platform: template
    sensors:

      nonsmoker:
        value_template: "{{ states('sensor.date') and (( as_timestamp(now()) - as_timestamp(strptime('18.07.2018', '%d.%m.%Y')) ) / 86400 ) | round(2) }}"
        friendly_name: 'Not smoking'
        unit_of_measurement: 'Days'
        icon_template: mdi:smoking-off

      gdrive_last_backup:
        friendly_name: GBackup time
        icon_template: mdi:clock
        value_template: "{{(as_timestamp(state_attr('sensor.snapshot_backup','last_snapshot')) )|timestamp_custom('%H:%M %d.%m.%Y ')}}"
        
      gdrive_backup_state:
        friendly_name: GBackup status
        icon_template: mdi:backup-restore
        value_template: "{{states('sensor.snapshot_backup')|capitalize|replace('_',' ')}}"
        
      git_stars:
        friendly_name: GitHub Stars
        value_template: "{{state_attr('sensor.myconfig','stargazers')|int}}"
        icon_template: mdi:star

      home_status:
        friendly_name: Home Occupation
        #device_class: presence
        value_template: >
          {% if states('binary_sensor.family_home') == "on" %}
          Occupied
          {% else %}
          Empty
          {% endif %}
        icon_template: >
          {% if states('binary_sensor.family_home') == "on" %}
          mdi:home-account
          {% else %}
          mdi:home-outline
          {% endif %}
        
# ############################################################################
# Last motion sensors
# ############################################################################
      last_motion:
        friendly_name: 'Last Motion'
        value_template: >
          {%- set sensors = expand('group.motioninternal') %}
          {% for sensor in sensors %}
            {% if as_timestamp(sensor.last_changed) == as_timestamp(sensors | map(attribute='last_changed') | max) %}
              {{ sensor.name }}
            {% endif %}
          {% endfor %}
      last_motion_time:
        friendly_name: 'Last Motion Time'
        value_template: '{{ as_timestamp(states.group.motioninternal.last_changed) | timestamp_custom("%a %d %b %H:%M") }}'

      security_devices_last_triggered:
        friendly_name: 'Last Triggered SecurityDevices'
        value_template: >
          {%- set sensors = expand('group.securitydevices') %}
          {% for sensor in sensors %}
            {% if as_timestamp(sensor.last_changed) == as_timestamp(sensors | map(attribute='last_changed') | max) %}
              {{ sensor.name }}
            {% endif %}
          {% endfor %}
      security_devices_last_triggered_time:
        friendly_name: 'Last Triggered SecurityDevices Time'
        value_template: '{{ as_timestamp(states.group.securitydevices.last_changed) | timestamp_custom("%a %d %b %H:%M") }}'

      door_last_change:
        friendly_name: 'Last change door sensor'
        value_template: >
          {%- set sensors = expand('group.doors') %}
          {% for sensor in sensors %}
            {% if as_timestamp(sensor.last_changed) == as_timestamp(sensors | map(attribute='last_changed') | max) %}
              {{ sensor.name }}
            {% endif %}
          {% endfor %}
      door_last_change_time:
        friendly_name: 'Last change door sensor time'
        value_template: '{{ (now()-states.sensor.door_last_change.last_changed) | timestamp_custom("%H:%M:%S") }}'

      window_last_change:
        friendly_name: 'Last change window sensor'
        value_template: >
          {%- set sensors = expand('group.windows') %}
          {% for sensor in sensors %}
            {% if as_timestamp(sensor.last_changed) == as_timestamp(sensors | map(attribute='last_changed') | max) %}
              {{ sensor.name }}
            {% endif %}
          {% endfor %}
      window_last_change_time:
        friendly_name: 'Last change window sensor time'
        value_template: '{{ (now()-states.sensor.window_last_change.last_changed) | timestamp_custom("%H:%M:%S") }}'

      people_home:
        friendly_name: Persons At Home
        value_template: "{{ expand('group.persons') | map(attribute='state') | select('eq','home')| list | length }}"
        unit_of_measurement: 'ea'
        icon_template: mdi:account-group

# ############################################################################
# Time\date sensor
# ############################################################################
  - platform: time_date
    display_options:
      - 'time'
      - 'date'
      - 'date_time'

  # - platform: template
  #   sensors:
  #     current_year:
  #       value_template: "{{states('sensor.date').split('-')[0]}}"
  #       unit_of_measurement: ''
  #     current_month:
  #       value_template: "{{states('sensor.date').split('-')[1]}}"
  #       unit_of_measurement: ''
  #     current_day:
  #       value_template: "{{states('sensor.date').split('-')[2]}}"
  #       unit_of_measurement: ''
  #     current_hour:
  #       value_template: "{{states('sensor.time').split(':')[0]}}"
  #       unit_of_measurement: ''
  #     current_minute:
  #       value_template: "{{states('sensor.time').split(':')[1]}}"
  #       unit_of_measurement: ''
        
# ############################################################################
# Xiaomi GW3 Sensors
# ############################################################################
  # - platform: template
  #   sensors:
  #     gw3_hb_radio_tx_power:
  #       value_template: "{{state_attr('sensor.0x588e81fffedcb38d_gateway','radio_tx_power')|int}}"
  #       icon_template: mdi:signal-cellular-2
  #       friendly_name: Gateway3 HB Radio TX Power
  #       unit_of_measurement: ''
  #     gw3_hb_radio_channel:
  #       value_template: "{{state_attr('sensor.0x588e81fffedcb38d_gateway','radio_channel')|int}}"
  #       icon_template: mdi:radio-tower
  #       friendly_name: Gateway3 HB Radio Channel
  #       unit_of_measurement: ''
        
  #     gw3_hs_radio_tx_power:
  #       value_template: "{{state_attr('sensor.0x842e14fffe1508a6_gateway','radio_tx_power')|int}}"
  #       icon_template: mdi:signal-cellular-2
  #       friendly_name: Gateway3 HS Radio TX Power
  #       unit_of_measurement: ''
  #     gw3_hs_radio_channel:
  #       value_template: "{{state_attr('sensor.0x842e14fffe1508a6_gateway','radio_channel')|int}}"
  #       icon_template: mdi:radio-tower
  #       friendly_name: Gateway3 HS Radio Channel
  #       unit_of_measurement: ''

  #     # gw3_hs_free_mem:
  #     #   value_template: "{{state_attr('sensor.0x842e14fffe1508a6_gateway','free_mem')|int}}"
  #     #   icon_template: mdi:chip
  #     #   friendly_name: Gateway3 HS Free Memory
  #     #   unit_of_measurement: 'kB'


  #     gw3_s_radio_tx_power:
  #       value_template: "{{state_attr('sensor.0x588e81fffedd3c41_gateway','radio_tx_power')|int}}"
  #       icon_template: mdi:signal-cellular-2
  #       friendly_name: Gateway3 S Radio TX Power
  #       unit_of_measurement: ''
  #     gw3_s_radio_channel:
  #       value_template: "{{state_attr('sensor.0x588e81fffedd3c41_gateway','radio_channel')|int}}"
  #       icon_template: mdi:radio-tower
  #       friendly_name: Gateway3 S Radio Channel
  #       unit_of_measurement: ''
        
  #     gw3_k_radio_tx_power:
  #       value_template: "{{state_attr('sensor.0x588e81fffe72678e_gateway','radio_tx_power')|int}}"
  #       icon_template: mdi:signal-cellular-2
  #       friendly_name: Gateway3 K Radio TX Power
  #       unit_of_measurement: ''
  #     gw3_k_radio_channel:
  #       value_template: "{{state_attr('sensor.0x588e81fffe72678e_gateway','radio_channel')|int}}"
  #       icon_template: mdi:radio-tower
  #       friendly_name: Gateway3 K Radio Channel
  #       unit_of_measurement: ''

  - platform: mqtt
    name: Mi Kettle Temperature
    state_topic: "r4s/b87c6f84aec1/rsp/temp"
    device_class: temperature
    unit_of_measurement: "°C"

  - platform: mqtt
    name: Mi Kettle State
    state_topic: "r4s/b87c6f84aec1/rsp/state"
    json_attributes_topic: "r4s/b87c6f84aec1/rsp/json"
    payload_not_available: "OFFLINE"
    icon: mdi:kettle
    
  - platform: mqtt
    name: Mi Kettle RSSI
    state_topic: "r4s/b87c6f84aec1/rssi"
    icon: mdi:rss

  - platform: rest
    resource: http://www.mosvodokanal.ru:10080/webservices/address/qual?code=26
    name: mosvodokanal
    value_template: '{{ value_json.result.dtto }}'
    scan_interval: '12:00:00'
    json_attributes_path: $.result
    json_attributes:
      - params
# 1006 - ph - ph - 6.0-9.0
# 1004 - цветность - град - не более 20
# 1005 - мутность - мг\дм3 - не более 1.5
# 1121 - остаточный хлор - мг\дм3 - не нормируется
# 1002 - запах при 20градС - баллы - не более 2
# 1200 - запах при 60градС - баллы - не более 2
# 1013 - железо общее - мг\дм3 - не более 0.3
# 1053 - общее микробное число - кол в 1мл - не более 50
# 5501 - общие колиморфные бактерии - КОЕ\100мл - отсутствие
# 1050 - термотолерантные колиморфные бактерии - КОЕ\100мл - отсутствие
# 1015 - жесткость общая - °Ж - не более 7
# 1104 - аммоний-ион - мг\дм3 - не более 1.9
# 1012 - нитриты - мг\дм3 - не более 3
# 1011 - нитраты - мг\дм3 - не более 45
# 1037 - фториды - мг\дм3 - не более 1.5
# 1018 - окисляемость перманганатная - мг\дм3 - не более 5
# 1008 - хлориды - мг\дм3 - не более 350

  - platform: template
    sensors:
      mosvodokanal_ph:
        friendly_name: Raw Water pH
        unit_of_measurement: pH
        value_template: "{{ state_attr('sensor.mosvodokanal', 'params').6.value | float }}"
        icon_template: mdi:flask-round-bottom

      mosvodokanal_dh:
        friendly_name: Raw Water DH
        unit_of_measurement: °DH
        value_template: "{{ (((state_attr('sensor.mosvodokanal', 'params').18.value) | float) * 2.804 ) | round(1)}}"
        icon_template: mdi:flask

#{{states|selectattr('attributes.device_class', 'eq','battery')|selectattr('attributes.unit_of_measurement','eq','%')|selectattr('state','<','20')|map(attribute='attributes.friendly_name') | unique | sort | list  | join('\n')}}

      # battery_devices_list:
      #   friendly_name: Battery Devices List
      #   value_template: >
      #     {%-for state in states.sensor
      #     if  state.entity_id.endswith("_battery")%}
      #     {{ state.name}}: {{state.state}}%%{%- if not loop.last %};{%endif%}
      #     {%-endfor%}
          
      # battery_levels:
      #   friendly_name: Battery Levels
      #   value_template: >
      #     {%- set threshold = 50 -%}
      #     {% set domains = ['sensor'] %}
      #     {% for domain in domains -%}
      #     {% for item in states[domain] if ( ("_battery" in item.entity_id and "0x" in item.entity_id and item.state| int < threshold) )-%}
      #     {% if (item.state | int < threshold) -%}

      #         {{ item.name }}: {{ item.state }}%{%- if not loop.last %};
      #     {% endif -%}{% endif -%}

      #     {% endfor %}
      #     {%- endfor %}

      # battery_levels_2:
      #   friendly_name: Battery Levels2
      #   value_template: >
      #     {%- macro LowBattery() -%}
      #     {% for item in states.sensor -%}
      #     {%- if "_battery" in item.entity_id and "0x" in item.entity_id and (item.state|int < 50 ) -%}
      #     X 
      #     {%- endif -%}
      #     {%- endfor %}
      #     {%- endmacro -%}
      #     {%- if LowBattery()[0] == "X" -%}
      #     {{LowBattery()|list|length }}
      #     {%- else -%}
      #     0
      #     {%- endif -%} 
      #   attribute_templates:
      #     devices: >-
      #       {% for item in states.sensor-%}
      #       {%- if "_battery" in item.entity_id and "0x" in item.entity_id and (item.state|int < 50 ) %}
      #       {{item.entity_id}}: {{ item.state }}%{% if not loop.last %}; {%- endif %}
      #       {%- endif -%}
      #       {%- endfor %}
            
  # - name: magnetic_situation
  #   platform: scrape 
  #   resource: https://tesis.lebedev.ru/magnetic_storms.html
  #   select: table.main td p:nth-of-type(4) > b
  #   unit_of_measurement: ' '
  #   value_template: "{{ value.split('(')[0] | int }}"
  #   scan_interval: 300

  # - platform: waqi
  #   token: !secret aqicn_api_key
  #   scan_interval: 900
  #   locations:
  #     - moscow
      
  # - platform: template 
  #   sensors: 
  #     waqi_co_level: 
  #       value_template: "{{ state_attr('sensor.waqi_koptevo_moscow_moscow_russia_koptevo_moscow_moscow_russia_koptevskii_moskva', 'co') | float }}"
  #       friendly_name: CO Level
  #       unit_of_measurement: aqi
  #       icon_template: mdi:molecule-co2
  #     waqi_o3_level: 
  #       value_template: "{{ state_attr('sensor.waqi_koptevo_moscow_moscow_russia_koptevo_moscow_moscow_russia_koptevskii_moskva', 'ozone') | float }}"
  #       friendly_name: Hexagon
  #       unit_of_measurement: aqi
  #       icon_template: mdi:hexagon-multiple-outline
  #     waqi_no2_level:
  #       value_template: "{{ state_attr('sensor.waqi_koptevo_moscow_moscow_russia_koptevo_moscow_moscow_russia_koptevskii_moskva', 'nitrogen_dioxide') | float }}"
  #       friendly_name: Nirogen
  #       unit_of_measurement: aqi
  #       icon_template: mdi:dump-truck
  #     waqi_so2_level: 
  #       value_template: "{{ state_attr('sensor.waqi_koptevo_moscow_moscow_russia_koptevo_moscow_moscow_russia_koptevskii_moskva', 'sulfur_dioxide') | float }}"
  #       friendly_name: Silfur
  #       unit_of_measurement: aqi
  #       icon_template: mdi:smog
  #     waqi_pm10: 
  #       value_template: "{{ state_attr('sensor.waqi_koptevo_moscow_moscow_russia_koptevo_moscow_moscow_russia_koptevskii_moskva', 'pm_10') }}"
  #       friendly_name: PM10
  #       unit_of_measurement: aqi
  #       icon_template: mdi:chart-scatter-plot-hexbin
  #     waqi_pm25: 
  #       value_template: "{{ state_attr('sensor.waqi_koptevo_moscow_moscow_russia_koptevo_moscow_moscow_russia_koptevskii_moskva', 'pm_2_5') }}"
  #       friendly_name: PM25
  #       unit_of_measurement: aqi
  #       icon_template: mdi:chart-scatter-plot

  # - platform: sun2
  #   monitored_conditions:
  #     - dawn
  #     - sunrise
  #     - solar_noon
  #     - sunset
  #     - dusk
  #     - daylight
  #     - civil_daylight
  #     - night
  #     - civil_night
  #     - elevation
  #     - min_elevation
  #     - max_elevation  
      
  # - platform: history_stats
  #   name: Quarantine meter Dima
  #   entity_id: person.dima
  #   state: "home"
  #   type: ratio
  #   duration:
  #     days: 2
  #   end: "{{ now() }}"
  
  # - platform: history_stats
  #   name: Quarantine meter Dima times left
  #   entity_id: person.dima
  #   state: "home"
  #   type: count
  #   duration:
  #     days: 2
  #   end: "{{ now() }}"

  # - platform: history_stats
  #   name: Quarantine meter Sandra
  #   entity_id: person.sandra
  #   state: "home"
  #   type: ratio
  #   duration:
  #     days: 2
  #   end: "{{ now() }}"
  
  # - platform: history_stats
  #   name: Quarantine meter Sandra times left
  #   entity_id: person.sandra
  #   state: "home"
  #   type: count
  #   duration:
  #     days: 2
  #   end: "{{ now() }}"

  # - platform: history_stats
  #   name: Quarantine meter vova
  #   entity_id: person.vova
  #   state: "home"
  #   type: ratio
  #   duration:
  #     days: 2
  #   end: "{{ now() }}"
  
  # - platform: history_stats
  #   name: Quarantine meter Vova times left
  #   entity_id: person.vova
  #   state: "home"
  #   type: count
  #   duration:
  #     days: 2
  #   end: "{{ now() }}"
