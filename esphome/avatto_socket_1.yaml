substitutions:
  board_name: avatto_socket_1
  
esphome:
  name: ${board_name}
  platform: ESP8266
  board: esp01_1m
  on_boot:
    priority: -10
    then:
    # on affter boot
    - switch.turn_on: switch1
    
wifi:
  ssid: !secret wifi_ssid_s
  password: !secret wifi_pass
  domain: .local
  reboot_timeout: 15min
  #output_power: 17.5dB
  fast_connect: true
  #power_save_mode: none
  manual_ip:
    static_ip: 192.168.1.66
    gateway: 192.168.1.1
    subnet: 255.255.255.0
    dns1: 192.168.1.1
    dns2: 8.8.8.8    

logger:
  baud_rate: 0

api:
  reboot_timeout: 0s

ota:

web_server:
  port: 80

binary_sensor:
  - platform: status
    name: ${board_name}_Status
    
  - platform: gpio
    pin:
      number: GPIO12
      inverted: True
    name: "${board_name}_button"
    on_press:
      - switch.toggle: switch1

output:
  - platform: gpio
    pin: GPIO13
    inverted: True
    id: led1

uart:
  rx_pin: GPIO03
  baud_rate: 4800

status_led:
  pin:
    number: GPIO02
    inverted: True

light:
  - platform: binary
    name: ${board_name}_LED
    output: led1

switch:
  - platform: gpio
    pin: GPIO14
    id: switch1
    icon: mdi:power-socket-eu
    name: ${board_name}_Relay

  - platform: restart
    name: ${board_name}_Restart

sensor:
  - platform: cse7766
    current:
      name: ${board_name}_Current
      icon: mdi:current-ac
      unit_of_measurement: A
    voltage:
      name: ${board_name}_V
      icon: mdi:flash-circle
      unit_of_measurement: V
    power:
      name: ${board_name}_W
      icon: mdi:flash-outline
      unit_of_measurement: W
    update_interval: 15s
      
  - platform: uptime
    name: ${board_name}_Uptime_s
    icon: mdi:clock-outline
    id: uptime_sensor

  - platform: wifi_signal
    name: ${board_name}_WiFi_RSSI
    update_interval: 60s

text_sensor:
  - platform: template
    name: ${board_name}_Uptime
    lambda: |-
        int seconds = round(id(uptime_sensor).raw_state);
        int days = seconds / (24 * 3600);
        seconds = seconds % (24 * 3600);
        int hours = seconds / 3600;
        seconds = seconds % 3600;
        int minutes = seconds /  60;
        seconds = seconds % 60;
        return (
          (days ? to_string(days) + "d " : "00d ") +
          (hours ? to_string(hours) + "h " : "00h ") +
          (minutes ? to_string(minutes) + "m " : "00m ") +
          (to_string(seconds) + "s")
        );
    icon: mdi:clock-start
    update_interval: 15s

time:
  - platform: homeassistant
    id: homeassistant_time

syslog:
    ip_address: "192.168.1.26"
    port: 514