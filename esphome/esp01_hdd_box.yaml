substitutions:
  board_name: esp01_hdd_box

esphome:
  name: esp01_hdd_box
  platform: ESP8266
  board: esp01_1m
  
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_pass
  domain: .localdomain
  manual_ip:
    static_ip: 192.168.1.114
    gateway: 192.168.1.1
    subnet: 255.255.255.0

# Enable logging
logger:

# Enable Home Assistant API
api:
  reboot_timeout: 0s

ota:

# web_server:
#   port: 80
  
switch:
  - platform: restart
    name: ${board_name}_Restart

  - platform: gpio
    pin: 
      number: GPIO0
      inverted: yes
      mode: OUTPUT_OPEN_DRAIN
    name: ${board_name}_PowerButton
    id: powerbutton
    internal: yes
  
  - platform: template
    name: ${board_name}_Power
    icon: "mdi:harddisk"
    turn_on_action:
    - switch.turn_on: powerbutton
    - delay: 300ms
    - switch.turn_off: powerbutton

binary_sensor:
  - platform: gpio
    pin: 
      number: GPIO2
#      inverted: true
    name: ${board_name}_PowerStatus
#    device_class: power

  - platform: status
    name: ${board_name}_Status

text_sensor:
  - platform: template
    name: ${board_name}_Uptime
    lambda: |-
      uint32_t dur = id(uptime_sensor).state;
      int dys = 0;
      int hrs = 0;
      int mnts = 0;
      if (dur > 86399) {
        dys = trunc(dur / 86400);
        dur = dur - (dys * 86400);
      }
      if (dur > 3599) {
        hrs = trunc(dur / 3600);
        dur = dur - (hrs * 3600);
      }
      if (dur > 59) {
        mnts = trunc(dur / 60);
        dur = dur - (mnts * 60);
      }
      char buffer[17];
      sprintf(buffer, "%ud %02uh %02um %02us", dys, hrs, mnts, dur);
      return {buffer};
    icon: mdi:clock-start
    update_interval: 15s

sensor:
  - platform: uptime
    name: ${board_name}_Uptime_s
    id: uptime_sensor
    update_interval: 15s

  - platform: wifi_signal
    name: ${board_name}_WiFi_RSSI
    update_interval: 60s
  
time:
  - platform: homeassistant
    id: homeassistant_time