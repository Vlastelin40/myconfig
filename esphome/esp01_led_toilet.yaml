substitutions:
  board_name: esp01_led_toilet

esphome:
  name: ${board_name}
  platform: ESP8266
  board: esp01_1m

wifi:
  ssid: !secret wifi_ssid_k
  password: !secret wifi_pass
  #domain: .local
  reboot_timeout: 15min
  #output_power: 17.5dB
  fast_connect: true
  #power_save_mode: none
  manual_ip:
    static_ip: 192.168.1.77
    gateway: 192.168.1.1
    subnet: 255.255.255.0
    dns1: 192.168.1.1
    dns2: 8.8.8.8

logger:
  baud_rate: 0

api:
  reboot_timeout: 0s

ota:

web_server:
  port: 80

light:
  - platform: monochromatic
    name: ${board_name}_Light
    output: pwm1
    effects:
      - flicker:
      - strobe:

output:
  - platform: esp8266_pwm
    id: pwm1
    pin: GPIO03
    frequency: 1000 Hz

binary_sensor:
  - platform: status
    name: ${board_name}_Status
    
switch:
  - platform: restart
    name: ${board_name}_Restart

sensor:
  - platform: uptime
    name: ${board_name}_Uptime_s
    icon: mdi:clock-outline
    id: uptime_sensor

  - platform: wifi_signal
    name: ${board_name}_WiFi_RSSI
    update_interval: 60s

text_sensor:
  - platform: template
    name: ${board_name}_Uptime
    lambda: |-
        int seconds = round(id(uptime_sensor).raw_state);
        int days = seconds / (24 * 3600);
        seconds = seconds % (24 * 3600);
        int hours = seconds / 3600;
        seconds = seconds % 3600;
        int minutes = seconds /  60;
        seconds = seconds % 60;
        return (
          (days ? to_string(days) + "d " : "00d ") +
          (hours ? to_string(hours) + "h " : "00h ") +
          (minutes ? to_string(minutes) + "m " : "00m ") +
          (to_string(seconds) + "s")
        );
    icon: mdi:clock-start
    update_interval: 15s
    
time:
  - platform: homeassistant
    id: homeassistant_time
