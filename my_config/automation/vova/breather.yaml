# #####################################################################################
#
# VOVA - Lights
#
# #####################################################################################
# Vova- breather auto co2
# ################################## 
  - alias: vova_breather_auto_co2
    id: vova_breather_auto_co2
    initial_state: true
    trigger:
      - platform: time_pattern
        minutes: '/3'
    condition:
      - condition: state
        entity_id: switch.breather_auto_v
        state: 'on'
      - condition: state
        entity_id: input_boolean.security_mode
        state: 'off'
    action:
      - choose:
          - conditions:
              - condition: state
                entity_id: binary_sensor.0x158d00022ccffe_contact
                state: 'off'
              - condition: numeric_state
                entity_id: sensor.esp32_node_v_co2
                above: input_number.co2_high_limit
              - condition: state
                entity_id: binary_sensor.breather_v
                state: 'off'
            sequence:
              - service: button.press
                entity_id: button.digma_ir_v_breather_pwr
              - condition: numeric_state
                entity_id: sensor.esp32_node_v_co2
                above: input_number.co2_high_limit
              - condition: state
                entity_id: switch.breather_auto_speed_v
                state: 'on'
              - service: fan.set_percentage
                entity_id: fan.breather_v
                data:
                  percentage: "{{states('sensor.breather_set_speed_s')|int(0) }}"

          - conditions:
              - condition: state
                entity_id: binary_sensor.0x158d00022ccffe_contact
                state: 'off'
              - condition: numeric_state
                entity_id: sensor.esp32_node_v_co2
                below: input_number.co2_low_limit
              - condition: state
                entity_id: binary_sensor.breather_v
                state: 'on'
            sequence:
              - service: button.press
                entity_id: button.digma_ir_v_breather_pwr
                
          - conditions:
              - condition: state
                entity_id: binary_sensor.0x158d00022ccffe_contact
                state: 'on'
              - condition: state
                entity_id: binary_sensor.breather_v
                state: 'on'
            sequence:
              - service: button.press
                entity_id: button.digma_ir_v_breather_pwr

# ##################################
# Vova - Breather Auto Timer
# ##################################
  - alias: vova_breather_auto_timer
    id: vova_breather_auto_timer
    initial_state: true
    trigger:
      - platform: event
        event_type: timer.finished
        event_data:
          entity_id: timer.breather_v
        id: 'timer_finish'
      - platform: state
        entity_id: binary_sensor.breather_v
        from: 'off'
        to: 'on'
        id: 'to_on'
      - platform: state
        entity_id: binary_sensor.digma_ir_v_breather_remote_used
        to: 'on'
        id: 'ir_used_remote'
      - platform: state
        entity_id: binary_sensor.digma_ir_v_breather_self_code
        to: 'on'
        id: 'ir_used_digma'
      - platform: state
        entity_id: input_select.breazer_timer
        to:
        id: 'input'
    action:
      - choose:
          - conditions:
              - condition: trigger
                id: "to_on"
            sequence:
              - service: timer.start
                entity_id: timer.breather_v
                data:
                  duration: "{{states('input_select.breazer_timer')|int * 60 }}"

              - service: input_number.set_value
                entity_id: input_number.last_action_breather_v
                data:
                  value: "{{as_timestamp(now())|int(0)}}"

              - service: input_boolean.turn_on
                entity_id: input_boolean.hourly_mode_breather_v
                
          - conditions:
              - condition: trigger
                id: "timer_finish"
            sequence:
              - service: button.press
                entity_id: button.digma_ir_v_breather_pwr

              - service: input_number.set_value
                entity_id: input_number.last_action_breather_v
                data:
                  value: "0"

              - condition: state
                entity_id: input_boolean.hourly_mode_breather_v
                state: 'on'

              - service: timer.start
                entity_id: timer.breather_v
                data:
                  duration: "{{states('input_select.breazer_timer')|int * 60 }}"

              - service: input_number.set_value
                entity_id: input_number.last_action_breather_v
                data:
                  value: "{{as_timestamp(now())|int(0)}}"

          - conditions:
              - condition: trigger
                id: "ir_used_remote"
            sequence:
              - condition: state
                entity_id: binary_sensor.breather_v
                state: 'on'

              - condition: state
                entity_id: timer.breather_v
                state: 'active'

              - service: timer.cancel
                entity_id: timer.breather_v

              - service: input_number.set_value
                entity_id: input_number.last_action_breather_v
                data:
                  value: "0"

              - service: input_boolean.turn_off
                entity_id: input_boolean.hourly_mode_breather_v

          - conditions:
              - condition: trigger
                id: "input"
            sequence:
              - condition: state
                entity_id: timer.breather_v
                state: 'active'
              # - condition: template
              #   value_template: "{{ state_attr('timer.breather_v','duration').split(':')[1]|int(0) > states('input_select.breazer_timer')|int(0) }}"
              - service: timer.start
                entity_id: timer.breather_v
                data:
                  duration: "{{states('input_select.breazer_timer')|int * 60 }}"
              - service: input_number.set_value
                entity_id: input_number.last_action_breather_v
                data:
                  value: "{{as_timestamp(now())|int(0)}}"

# ##################################
# Vova - Breather Plug Toggle
# ##################################
  - alias: vova_breather_plug_toggle
    id: vova_breather_plug_toggle
    initial_state: true
    max_exceeded: silent
    mode: queued
    max: 10
    trigger:
      - platform: state
        entity_id: switch.0x158d000344998e_switch
        to: 'off'
        for:
          seconds: 30
    condition:
      - condition: state
        entity_id: input_boolean.security_mode
        state: 'off'
    action:
      - service: switch.turn_on
        entity_id: switch.0x158d000344998e_switch
      # - service: notify.telegram
      #   data:
      #     message: "\U00002705 Включение - {{trigger.to_state.attributes.friendly_name}}"