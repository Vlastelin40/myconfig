substitutions:
  board_name: rgb_led_strip
 
esphome:
  name: ${board_name}
  platform: ESP8266
  board: esp01_1m
  comment: RGB Led Strip
  
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_pass
  domain: .local
  reboot_timeout: 0s
  manual_ip:
    static_ip: 192.168.1.76
    gateway: 192.168.1.1
    subnet: 255.255.255.0

# Enable logging
logger:

# Enable Home Assistant API
api:
  reboot_timeout: 0s

ota:

# web_server:
#   port: 80
  
binary_sensor:
  - platform: status
    name: ${board_name}_Status
    
light:
  - platform: rgb
    name: ${board_name}_LED
    red: pwm_r
    green: pwm_g
    blue: pwm_b
    effects:
      - random:
      - strobe:
      - flicker:
      
      
output:
  - platform: esp8266_pwm
    pin: GPIO5 #GPIO12
    frequency: 1000 Hz
    id: pwm_r

  - platform: esp8266_pwm
    pin: GPIO13
    frequency: 1000 Hz
    id: pwm_g

  - platform: esp8266_pwm
    pin: GPIO12 #GPIO13
    frequency: 1000 Hz
    id: pwm_b


    
text_sensor:
  - platform: template
    name: ${board_name}_Uptime
    lambda: |-
        int seconds = round(id(uptime_sensor).raw_state);
        int days = seconds / (24 * 3600);
        seconds = seconds % (24 * 3600);
        int hours = seconds / 3600;
        seconds = seconds % 3600;
        int minutes = seconds /  60;
        seconds = seconds % 60;
        return (
          (days ? to_string(days) + "d " : "00d ") +
          (hours ? to_string(hours) + "h " : "00h ") +
          (minutes ? to_string(minutes) + "m " : "00m ") +
          (to_string(seconds) + "s")
        );
    icon: mdi:clock-start
    update_interval: 15s

sensor:
  - platform: uptime
    name: ${board_name}_Uptime_s
    id: uptime_sensor
    update_interval: 15s

  - platform: wifi_signal
    name: ${board_name}_WiFi_RSSI
    update_interval: 60s    

switch:
  - platform: restart
    name: ${board_name}_Restart

time:
  - platform: homeassistant
    id: homeassistant_time