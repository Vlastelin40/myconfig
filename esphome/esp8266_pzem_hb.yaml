substitutions:
  board_name: esp8266_pzem_hb

esphome:
  name: ${board_name}
  platform: ESP8266
  board: nodemcuv2
  comment: ESP8266 PZEM/BME680/Dallas Node
  esp8266_restore_from_flash: true
  on_loop:
    then:
      - lambda: delay(5);
wifi:
  # ssid: !secret wifi_ssid
  # password: !secret wifi_pass
  # domain: .localdomain
  reboot_timeout: 15min
  output_power: 17dB
  #fast_connect: true
  power_save_mode: none
  manual_ip:
    static_ip: 192.168.1.63
    gateway: 192.168.1.1
    subnet: 255.255.255.0
    dns1: 192.168.1.1
    dns2: 8.8.8.8
  networks:
    - ssid: !secret wifi_ssid_hb
      password: !secret wifi_pass
      hidden: true
      bssid: !secret wifi_bssid_hb_iot
      priority: 2
    - ssid: !secret wifi_ssid
      password: !secret wifi_pass
      hidden: false
      bssid: !secret wifi_bssid_hb_main
      priority: 1
    - ssid: !secret wifi_ssid
      password: !secret wifi_pass
      hidden: false
      priority: 0

logger:
  baud_rate: 0
  
api:
  reboot_timeout: 5min

ota:

#web_server:
#  port: 80

uart:
  rx_pin: GPIO12
  tx_pin: GPIO14
  baud_rate: 9600
  stop_bits: 1

i2c:
  sda: GPIO04
  scl: GPIO05
  scan: True

dallas:
  - pin: GPIO13
    update_interval: 30s
    id: dallas_node

binary_sensor:
  - platform: status
    name: ${board_name}_Status

  - platform: template
    name: ${board_name}_time_isvalid
    lambda: |- 
      if (id(sntp_time).now().is_valid()) {
        return true;
      } else {
        return false;
      }

text_sensor:
  - platform: template
    name: ${board_name}_Uptime
    lambda: |-
      uint32_t dur = id(uptime_sensor).state;
      int dys = 0;
      int hrs = 0;
      int mnts = 0;
      if (dur > 86399) {
        dys = trunc(dur / 86400);
        dur = dur - (dys * 86400);
      }
      if (dur > 3599) {
        hrs = trunc(dur / 3600);
        dur = dur - (hrs * 3600);
      }
      if (dur > 59) {
        mnts = trunc(dur / 60);
        dur = dur - (mnts * 60);
      }
      char buffer[17];
      sprintf(buffer, "%ud %02uh %02um %02us", dys, hrs, mnts, dur);
      return {buffer};
    icon: mdi:clock-start
    update_interval: 60s

sensor:
  - platform: uptime
    name: ${board_name}_Uptime_s
    id: uptime_sensor
    update_interval: 60s

  - platform: wifi_signal
    name: ${board_name}_WiFi_RSSI
    update_interval: 60s

  # - platform: adc
  #   pin: VCC
  #   name: ${board_name}_Vcc    

  - platform: pzemac
    current:
      name: ${board_name}_Current
      accuracy_decimals: 1
    voltage:
      name: ${board_name}_Voltage
      accuracy_decimals: 1
    energy:
      name: ${board_name}_Energy
      accuracy_decimals: 3
      unit_of_measurement: 'kWh'
      filters:
        - multiply: 0.001      
    power:
      name: ${board_name}_Power
      accuracy_decimals: 0
      id: id_power
      unit_of_measurement: W
    frequency:
      name: ${board_name}_Frequency
      accuracy_decimals: 0
    power_factor:
      name: ${board_name}_Power Factor
      accuracy_decimals: 2
      unit_of_measurement: ' '
      icon: mdi:cosine-wave
    update_interval: 15s

  - platform: template
    name: ${board_name}_Power_kW
    lambda: return (id(id_power).state)*0.001;
    accuracy_decimals: 3
    update_interval: 15s
    unit_of_measurement: 'kW'
    icon: mdi:lightning-bolt-outline
    
  - platform: template
    name: ${board_name}_Power_Night
    id: id_power_night
    icon: mdi:speedometer
    lambda: |- 
      auto id_loc_time = id(sntp_time).now();
      if ((id(id_power).state >= 0) and id_loc_time.is_valid()) {
        if ( (id(sntp_time).now().hour >= 23) || (id(sntp_time).now().hour >= 0 && id(sntp_time).now().hour < 7) ) {
          return id(id_power).state;
        } else {
          return 0.0;
        }
      } else {
        return 0.0;
      } 
    accuracy_decimals: 1
    update_interval: 15s
    unit_of_measurement: 'W'
    
  - platform: template
    name: ${board_name}_Power_Day
    id: id_power_day
    icon: mdi:speedometer
    lambda: |-
      auto id_loc_time = id(sntp_time).now();
      if ((id(id_power).state >= 0) and id_loc_time.is_valid()) {
        if ( (id(sntp_time).now().hour >= 7 && id(sntp_time).now().hour < 23) ) {
          return id(id_power).state;
        } else {
          return 0.0;
        }
      } else {
        return 0.0;
      }         
    accuracy_decimals: 1
    update_interval: 15s
    unit_of_measurement: 'W'

  - platform: integration
    name: ${board_name}_Energy_Monthly
    id: id_energy_monthly
    sensor: id_power
    time_unit: h
    filters:
      - multiply: 0.001
    unit_of_measurement: 'kWh'
    accuracy_decimals: 3
    restore: true    

  - platform: integration
    name: ${board_name}_Energy_Monthly_Day
    id: id_energy_monthly_day
    sensor: id_power_day
    time_unit: h
    filters:
      - multiply: 0.001
    unit_of_measurement: 'kWh'
    accuracy_decimals: 3
    restore: true   

  - platform: integration
    name: ${board_name}_Energy_Monthly_Night
    id: id_energy_monthly_night
    sensor: id_power_night
    time_unit: h
    filters:
      - multiply: 0.001
    unit_of_measurement: 'kWh'
    accuracy_decimals: 3
    restore: true     

  - platform: total_daily_energy
    name: ${board_name}_Energy_Daily
    icon: mdi:gauge
    id: id_energy_daily
    power_id: id_power
    filters:
      - multiply: 0.001
    unit_of_measurement: 'kWh'
    accuracy_decimals: 3            

  - platform: total_daily_energy
    name: ${board_name}_Energy_Daily_Night
    icon: mdi:gauge
    id: id_energy_daily_night
    power_id: id_power_night
    filters:
      - multiply: 0.001
    unit_of_measurement: 'kWh'
    accuracy_decimals: 3

  - platform: total_daily_energy
    name: ${board_name}_Energy_Daily_Day
    icon: mdi:gauge
    id: id_energy_daily_day
    power_id: id_power_day
    filters:
      - multiply: 0.001
    unit_of_measurement: 'kWh'
    accuracy_decimals: 3

  - platform: bme680
    temperature:
      name: ${board_name}_Temperature
      oversampling: 16x
      accuracy_decimals: 1
    pressure:
      name: ${board_name}_Pressure
      accuracy_decimals: 0
    humidity:
      name: ${board_name}_Humidity
      accuracy_decimals: 0
    gas_resistance:
      name: ${board_name}_Resistance
      accuracy_decimals: 0
    address: 0x77
    update_interval: 30s    

  - platform: dallas
    address: 0x613C01D075384328
    name: ${board_name}_Dallas
    dallas_id: dallas_node
    accuracy_decimals: 1
    resolution: 12

switch:
  - platform: restart
    name: ${board_name}_Restart

  - platform: template
    name: ${board_name}_Energy_Reset_Monthly_Night
    turn_on_action: 
      - sensor.integration.reset: id_energy_monthly_night     

  - platform: template
    name: ${board_name}_Energy_Reset_Monthly_Day
    turn_on_action: 
      - sensor.integration.reset: id_energy_monthly_day

  - platform: template #
    name: ${board_name}_Energy_Reset_Monthly
    turn_on_action: 
      - sensor.integration.reset: id_energy_monthly

time:
  - platform: homeassistant
    id: homeassistant_time
  - platform: sntp
    id: sntp_time
    timezone: UTC-3