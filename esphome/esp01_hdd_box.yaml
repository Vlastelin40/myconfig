substitutions:
  board_name: esp01_hdd_box

esphome:
  name: esp01_hdd_box
  platform: ESP8266
  board: esp01_1m
  comment: ESP01 HDD Box
  
wifi:
  ssid: !secret wifi_ssid_k
  password: !secret wifi_pass
  #domain: .local
  reboot_timeout: 15min
  #output_power: 17.5dB
  fast_connect: true
  #power_save_mode: none
  manual_ip:
    static_ip: 192.168.1.114
    gateway: 192.168.1.1
    subnet: 255.255.255.0
    dns1: 192.168.1.1
    dns2: 8.8.8.8

logger:
  baud_rate: 0
  
api:
  reboot_timeout: 0s

ota:

web_server:
  port: 80
  
switch:
  - platform: restart
    name: ${board_name}_Restart

  - platform: gpio
    pin: 
      number: GPIO0
      inverted: yes
      mode: OUTPUT_OPEN_DRAIN
    name: ${board_name}_Relay
    id: relay
    on_turn_on:
      - delay: 300ms
      - switch.turn_off: relay


binary_sensor:
  - platform: gpio
    pin: 
      number: GPIO2
    name: ${board_name}_PowerStatus

  - platform: status
    name: ${board_name}_Status

text_sensor:
  - platform: template
    name: ${board_name}_Uptime
    lambda: |-
        int seconds = round(id(uptime_sensor).raw_state);
        int days = seconds / (24 * 3600);
        seconds = seconds % (24 * 3600);
        int hours = seconds / 3600;
        seconds = seconds % 3600;
        int minutes = seconds /  60;
        seconds = seconds % 60;
        return (
          (days ? to_string(days) + "d " : "00d ") +
          (hours ? to_string(hours) + "h " : "00h ") +
          (minutes ? to_string(minutes) + "m " : "00m ") +
          (to_string(seconds) + "s")
        );
    icon: mdi:clock-start
    update_interval: 15s

sensor:
  - platform: uptime
    name: ${board_name}_Uptime_s
    id: uptime_sensor
    update_interval: 15s

  - platform: wifi_signal
    name: ${board_name}_WiFi_RSSI
    update_interval: 60s
  
# time:
#   - platform: homeassistant
#     id: homeassistant_time