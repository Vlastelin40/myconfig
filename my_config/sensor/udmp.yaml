#  - platform: ssh
#    name: udmp_wan_state
#    host: !secret udmp_ip
 #   username: !secret udmp_usr
 #   password: !secret udmp_passwd
#    command: !secret udmp_failover_cmd
 #   scan_interval: 30
#    value_template: "{{ value }}"
    # - platform: unifigateway
    #   host: !secret udmp_host
    #   port: 443
    #   version: UDMP-unifiOS
    #   username: !secret udmp_username
    #   password: !secret udmp_password
    #   monitored_conditions:
    #     - www
    #     - wan
    #     #- wlan
    #     #- lan
    #     #- alerts
    #     #- firmware
    #     - vpn

  # - platform: command_line
  #   name: UnifiOS UDMP
  #   command: !secret udmp_unifios
  #   value_template: |-
  #     {% set json = value_json.data[1] %}
  #     {{ json["system-stats"].cpu }}|
  #     {{ json.temperatures[0].value | float(0) | round (1) }}|
  #     {{ json["system-stats"].mem }}|
  #     {{ json.internet }}|
  #     {{ json.startup_timestamp | timestamp_custom('%Y-%m-%dT%H:%M:%S') }}|
  #   scan_interval: 60

  # - platform: command_line
  #   name: UnifiOS USW16
  #   command: !secret udmp_unifios
  #   value_template: |-
  #     {% set json = value_json.data[0] %}
  #     {{ json["system-stats"].cpu }}|
  #     {{ json["system-stats"].mem }}|
  #     {{ json.fan_level }}|
  #     {{ json.general_temperature }}|
  #     {{ json.startup_timestamp | timestamp_custom('%Y-%m-%dT%H:%M:%S') }}
  #     {{ json.overheating }}
  #   scan_interval: 60

  - platform: command_line
    name: UnifiOS State
    command: !secret udmp_unifios
    unique_id: unifios_state
    value_template: |-
      {% set ns = namespace(lowest = 0) %}
      {% for x in range(0,value_json["data"]|count) %}
        {% if value_json["data"][x].model == "UDMPRO" %}
          {% set ns.lowest = x %}
        {% endif %}
      {% endfor %}
      {% set udm = value_json["data"][ns.lowest] %}
      {% set ns = namespace(lowest = 0) %}
      {% for x in range(0,value_json["data"]|count) %}
        {% if value_json["data"][x].model == "US624P" %}
          {% set ns.lowest = x %}
        {% endif %}
      {% endfor %}
      {% set usw = value_json["data"][ns.lowest] %}
      {{ udm["system-stats"].cpu }}|
      {{ udm.temperatures[0].value | float(0) | round (1) }}|
      {{ udm["system-stats"].mem }}|
      {{ udm.overheating }}|
      {{ udm.startup_timestamp | timestamp_custom('%Y-%m-%dT%H:%M:%S') }}|
      {{ usw["system-stats"].cpu }}|
      {{ usw["system-stats"].mem }}|
      {{ usw.fan_level }}|
      {{ usw.general_temperature }}|
      {{ usw.startup_timestamp | timestamp_custom('%Y-%m-%dT%H:%M:%S') }}|
      {{ usw.overheating }}|
      {{ udm["sys_stats"].loadavg_1 }}|
      {{ udm["sys_stats"].loadavg_5 }}|
      {{ udm["sys_stats"].loadavg_15 }}|
      {{ udm["sys_stats"].mem_total }}|
      {{ udm["sys_stats"].mem_used }}|
      {{ udm["sys_stats"].mem_buffer }}|
      {{ udm.storage[1].used }}|
      {{ udm.wan1.up }}|
      {{ udm.wan2.up }}|
      {{ udm.wan1.is_uplink }}|
      {{ udm.wan2.is_uplink }}|
      {{ udm.uplink.name }}|
      {{ udm.uplink.ip }}|
      {{ udm.temperatures[1].value | float(0) | round (1) }}
    scan_interval: 30

  # - platform: unifi_status
  #   host: !secret udmp_host
  #   username: !secret udmp_usr
  #   password: !secret udmp_passwd
  #   monitored_conditions:
  #     - vpn
  #     - www
  #     - lan
  #     - wan
  #     - wlan
  #     - firmware