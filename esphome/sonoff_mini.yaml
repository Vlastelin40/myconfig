substitutions:
  board_name: Thermal Pad

esphome:
  name: sonoff_mini
  platform: ESP8266
  board: esp01_1m
  comment: Sonoff Mini Thermo Pad Controller 
  # on_boot:
  #   priority: -100
  #   then:
  #     - wait_until:
  #         time.has_time:
  #     # - wait_until:
  #     #     mqtt.connected:
  #     - delay: 1s
  #     - if:
  #         condition:
  #           wifi.connected:
  #         then:
  #           - light.turn_on: wifi_led
  #     - delay: 5s
  #     - if:
  #         condition:
  #           sensor.in_range:
  #             id: dallas_ambient
  #             above: 30
  #         then:
  #           - climate.control:
  #               id: climate_pad
  #               mode: 'OFF'
  #     - if:
  #         condition:
  #           sensor.in_range:
  #             id: dallas_ambient
  #             below: 30
  #         then:
  #           - climate.control:
  #               id: climate_pad
  #               mode: HEAT


wifi:
  ssid: !secret wifi_ssid_hb
  password: !secret wifi_pass
  domain: .local
  reboot_timeout: 15min
  #output_power: 17.5dB
  fast_connect: true
  #power_save_mode: none
  manual_ip:
    static_ip: 192.168.1.117
    gateway: 192.168.1.1
    subnet: 255.255.255.0
    dns1: 192.168.1.1
    dns2: 8.8.8.8

logger:

api:
  reboot_timeout: 0s

ota:

web_server:
  port: 80

dallas:
  - pin: GPIO04
    update_interval: 3s
    id: dallas_node

output:
  - platform: gpio
    id: manual_status_led
    pin: 
      number: GPIO13
      inverted: false

light:
  - platform: binary
    name: ${board_name}_Status_LED
    internal: true
    output: manual_status_led
    id: wifi_led
  
binary_sensor:
  - platform: gpio
    pin: GPIO00
    id: reset
    internal: true
    filters:
      - invert:
      - delayed_off: 10ms
    on_press:
      - switch.toggle: 
          id: relay

  # - platform: gpio
  #   name: ${board_name}_sw
  #   pin: GPIO04
  #   id: switch_1
  #   on_press:
  #     then:
  #       - switch.toggle:
  #           id: relay
  #   on_release:
  #     then:
  #       - switch.toggle:
  #           id: relay

  - platform: status
    name: ${board_name}_Status

  - platform: template
    name: ${board_name}_Alarm
    id: template_bin_alarm
    filters:
      - delayed_off: 15s
    device_class: problem

switch:
  - platform: gpio
    name: ${board_name}_Relay
    pin: GPIO12
    id: relay

climate:
  - platform: bang_bang
    visual:
      min_temperature: 30 °C
      max_temperature: 50 °C
      temperature_step: 1 °C  
    name: ${board_name}_Thermo_Pad
    sensor: dallas_pad
    default_target_temperature_low: 42 °C
    default_target_temperature_high: 48 °C
    heat_action:
      - switch.turn_on: relay
    idle_action:
      - switch.turn_off: relay
    id: climate_pad
    
sensor:
  - platform: uptime
    name: ${board_name}_Uptime_s
    id: uptime_sensor

  - platform: wifi_signal
    name: ${board_name}_WiFi_RSSI
    update_interval: 60s

  - platform: dallas
    address: 0x613C01D075384328
    dallas_id: dallas_node
    name: ${board_name}_ambient_temperature
    accuracy_decimals: 2
    resolution: 12
    id: dallas_ambient
    on_value_range:
      - above: 30
        then:
          - climate.control:
              id: climate_pad
              mode: 'OFF'
      - below: 30
        then:
          - climate.control:
              id: climate_pad
              mode: HEAT            

  - platform: dallas
    address: 0x2A01203768D6D728
    dallas_id: dallas_node
    name: ${board_name}_pad_temperture
    accuracy_decimals: 2
    resolution: 12
    id: dallas_pad
    on_value:
      then:
        - if:
            condition:
              lambda: 'return ((id(dallas_pad).state - id(climate_pad).target_temperature_high ) >= 1) ;'
            then:
              - logger.log: " >>> The dallas_pad above target high"
              - text_sensor.template.publish:
                  id: template_text_log
                  state: "The dallas_pad above target high"
              - if:
                  condition:
                    switch.is_on: relay
                  then:
                    - binary_sensor.template.publish:
                        id: template_bin_alarm
                        state: ON                  
                    - logger.log: " >>> Switching off relay"
                    - text_sensor.template.publish:
                        id: template_text_log
                        state: "Switching off relay"
                    - switch.turn_off: relay
                    - delay: '00:00:15'
                    - binary_sensor.template.publish:
                        id: template_bin_alarm
                        state: OFF                    
            else:
              - logger.log: " >>> The dallas_pad below target high"
              - text_sensor.template.publish:
                  id: template_text_log
                  state: "The dallas_pad below target high"
              - binary_sensor.template.publish:
                  id: template_bin_alarm
                  state: OFF

  - platform: template
    name: ${board_name} Power
    lambda: |-
      if (id(relay).state) {
        return 140.0;
      } else {
        return 0.0;
      }
    update_interval: 15s
    device_class: "power"
    unit_of_measurement: 'W'
    state_class: "measurement"
    id: power

  - platform: total_daily_energy
    name: ${board_name} Daily Energy
    power_id: power
    filters:
      - multiply: 0.001
    unit_of_measurement: 'kWh'
    accuracy_decimals: 1
    
text_sensor:
  - platform: template
    name: ${board_name}_Uptime
    lambda: |-
      uint32_t dur = id(uptime_sensor).state;
      int dys = 0;
      int hrs = 0;
      int mnts = 0;
      if (dur > 86399) {
        dys = trunc(dur / 86400);
        dur = dur - (dys * 86400);
      }
      if (dur > 3599) {
        hrs = trunc(dur / 3600);
        dur = dur - (hrs * 3600);
      }
      if (dur > 59) {
        mnts = trunc(dur / 60);
        dur = dur - (mnts * 60);
      }
      char buffer[17];
      sprintf(buffer, "%ud %02uh %02um %02us", dys, hrs, mnts, dur);
      return {buffer};
    icon: mdi:clock-start
    update_interval: 15s

  - platform: template
    name: ${board_name}_Log
    id: template_text_log

button:
  - platform: restart
    name: ${board_name}_Restart

time:
  - platform: sntp
    id: sntp_time
    timezone: Europe/Moscow