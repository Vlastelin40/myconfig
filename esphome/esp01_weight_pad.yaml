substitutions:
  board_name: esp01_weight_pad
  ip_address: 192.168.1.69

esphome:
  name: ${board_name}
  comment: ESP01 HX711 node

esp8266:
  board: esp01_1m

wifi:
  ssid: !secret wifi_ssid_k
  password: !secret wifi_pass
  domain: .local
  reboot_timeout: 15min
  #output_power: 17.5dB
  fast_connect: true
  #power_save_mode: none
  manual_ip:
    static_ip: ${ip_address}
    gateway: 192.168.1.1
    subnet: 255.255.255.0
    dns1: 192.168.1.1
    dns2: 8.8.8.8

logger:
  baud_rate: 0

api:
  reboot_timeout: 0s

ota:

web_server:
  port: 80

binary_sensor:
  - platform: status
    name: ${board_name}_Status
    
button:
  - platform: restart
    name: ${board_name}_Restart

sensor:
  - platform: uptime
    name: ${board_name}_Uptime_s
    icon: mdi:clock-outline
    id: uptime_sensor

  - platform: wifi_signal
    name: ${board_name}_WiFi_RSSI
    update_interval: 60s

  - platform: hx711
    name: ${board_name}_load
    dout_pin: GPIO02
    clk_pin: GPIO03
    gain: 128
    update_interval: 15s
    id: id_load
    filters:
      - calibrate_linear:
          - 140537 -> 0
          - 76180 -> 2800
    unit_of_measurement: g

  - platform: template
    name: ${board_name}_fill
    update_interval: 15s
    filters:
      - calibrate_linear:
          - 3000 -> 0.0
          - 9250 -> 100.0
    unit_of_measurement: '%'
    accuracy_decimals: 0
    lambda: |-
      float raw_value = id(id_load).state;
      return raw_value;

  - platform: adc
    pin: VCC
    name: ${board_name}_Vcc
    update_interval: 15s

text_sensor:
  - platform: template
    name: ${board_name}_Uptime
    lambda: |-
      uint32_t dur = id(uptime_sensor).state;
      int dys = 0;
      int hrs = 0;
      int mnts = 0;
      if (dur > 86399) {
        dys = trunc(dur / 86400);
        dur = dur - (dys * 86400);
      }
      if (dur > 3599) {
        hrs = trunc(dur / 3600);
        dur = dur - (hrs * 3600);
      }
      if (dur > 59) {
        mnts = trunc(dur / 60);
        dur = dur - (mnts * 60);
      }
      char buffer[17];
      sprintf(buffer, "%ud %02uh %02um %02us", dys, hrs, mnts, dur);
      return {buffer};
    icon: mdi:clock-start
    update_interval: 15s

  - platform: wifi_info
    ip_address:
      name: ${board_name}_IP
    ssid:
      name: ${board_name}_SSID
    bssid:
      name: ${board_name}_BSSID
    mac_address:
      name: ${board_name}_Mac
    scan_results:
      name: ${board_name}_Latest_Scan_Results

  - platform: version
    name: ${board_name}_ESPHome_Version
    hide_timestamp: true

time:
  - platform: sntp
    id: sntp_time
    timezone: Europe/Moscow
