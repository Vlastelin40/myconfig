substitutions:
  board_name: d1mini_rf

esphome:
  name: ${board_name}
  platform: ESP8266
  board: d1_mini
  
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_pass
  domain: .local
  reboot_timeout: 15min
  manual_ip:
    static_ip: 192.168.1.240
    gateway: 192.168.1.1
    subnet: 255.255.255.0
    dns1: 192.168.1.1
    dns2: 8.8.8.8


logger:

api:
  reboot_timeout: 0s

ota:

web_server:
  port: 80

remote_receiver:
  pin: 
    number: GPIO5
    inverted: true
  dump:
    - rc_switch
  # Settings to optimize recognition of RF devices
  tolerance: 50%
  filter: 250us
  idle: 4ms
  buffer_size: 2kb

switch:
  - platform: restart
    name: ${board_name}_Restart

binary_sensor:
  - platform: status
    name: ${board_name}_Status

# text_sensor:
#   - platform: template
#     name: ${board_name}_Uptime
#     lambda: |-
#       uint32_t dur = id(uptime_sensor).state;
#       int dys = 0;
#       int hrs = 0;
#       int mnts = 0;
#       if (dur > 86399) {
#         dys = trunc(dur / 86400);
#         dur = dur - (dys * 86400);
#       }
#       if (dur > 3599) {
#         hrs = trunc(dur / 3600);
#         dur = dur - (hrs * 3600);
#       }
#       if (dur > 59) {
#         mnts = trunc(dur / 60);
#         dur = dur - (mnts * 60);
#       }
#       char buffer[17];
#       sprintf(buffer, "%ud %02uh %02um %02us", dys, hrs, mnts, dur);
#       return {buffer};
#     icon: mdi:clock-start
#     update_interval: 15s

# sensor:
#   - platform: uptime
#     name: ${board_name}_Uptime_s
#     id: uptime_sensor
#     update_interval: 15s

#   - platform: wifi_signal
#     name: ${board_name}_WiFi_RSSI
#     update_interval: 60s
  
time:
  - platform: homeassistant
    id: homeassistant_time