substitutions:
  board_name: esp01_pzem

esphome:
  name: ${board_name}
  platform: ESP8266
  board: esp01_1m
  comment: ESP01 PZEM

wifi:
  ssid: !secret wifi_ssid_k
  password: !secret wifi_pass
  domain: .local
  reboot_timeout: 15min
  #output_power: 17.5dB
  fast_connect: true
  #power_save_mode: none
  manual_ip:
    static_ip: 192.168.1.92
    gateway: 192.168.1.1
    subnet: 255.255.255.0
    dns1: 192.168.1.1
    dns2: 8.8.8.8

logger:
  baud_rate: 0

api:
  reboot_timeout: 0s

ota:

web_server:
  port: 80

uart:
  rx_pin: RX
  tx_pin: TX
  baud_rate: 9600
  #stop_bits: 2
  id: pzem_uart

modbus:
  id: pzem_modbus
  uart_id: pzem_uart

binary_sensor:
  - platform: status
    name: ${board_name}_Status

  - platform: template
    name: ${board_name}_AC_State
    lambda: |-
      if (id(id_voltage).state > 200) {
        return true;
      } else {
        return false;
      }
    device_class: power
    
switch:
  - platform: restart
    name: ${board_name}_Restart

sensor:
  - platform: uptime
    name: ${board_name}_Uptime_s
    icon: mdi:clock-outline
    id: uptime_sensor

  - platform: wifi_signal
    name: ${board_name}_WiFi_RSSI
    update_interval: 60s

  - platform: pzemac
    # current:
    #   name: ${board_name}_Current
    #   accuracy_decimals: 1
    #   device_class: current
    voltage:
      name: ${board_name}_Voltage
      accuracy_decimals: 1
      device_class: voltage
      id: id_voltage
    # energy:
    #   name: ${board_name}_Energy
    #   accuracy_decimals: 3
    #   unit_of_measurement: 'kWh'
    #   device_class: energy
    #   filters:
    #     - multiply: 0.001      
    # power:
    #   name: ${board_name}_Power
    #   accuracy_decimals: 0
    #   id: id_power
    #   unit_of_measurement: W
    #   device_class: power
    frequency:
      name: ${board_name}_Frequency
      accuracy_decimals: 0
    # power_factor:
    #   name: ${board_name}_Power Factor
    #   accuracy_decimals: 2
    #   unit_of_measurement: ''
    #   icon: mdi:cosine-wave
    #   id: id_power_factor
    #   device_class: power_factor
    update_interval: 10s
    modbus_id: pzem_modbus

text_sensor:
  - platform: template
    name: ${board_name}_Uptime
    lambda: |-
      uint32_t dur = id(uptime_sensor).state;
      int dys = 0;
      int hrs = 0;
      int mnts = 0;
      if (dur > 86399) {
        dys = trunc(dur / 86400);
        dur = dur - (dys * 86400);
      }
      if (dur > 3599) {
        hrs = trunc(dur / 3600);
        dur = dur - (hrs * 3600);
      }
      if (dur > 59) {
        mnts = trunc(dur / 60);
        dur = dur - (mnts * 60);
      }
      char buffer[17];
      sprintf(buffer, "%ud %02uh %02um %02us", dys, hrs, mnts, dur);
      return {buffer};
    icon: mdi:clock-start
    update_interval: 15s

    
time:
  - platform: homeassistant
    id: homeassistant_time