substitutions:
  board_name: avatto_socket_1
  
esphome:
  name: ${board_name}
  platform: ESP8266
  board: esp01_1m
  on_boot:
    priority: -10
    then:
    # on affter boot
    - switch.turn_on: switch1
    
wifi:
  ssid: !secret wifi_ssid_k
  password: !secret wifi_pass
  domain: .localdomain
  reboot_timeout: 15min
  output_power: 17.5dB
  fast_connect: true
  power_save_mode: none
  manual_ip:
    static_ip: 192.168.1.66
    gateway: 192.168.1.1
    subnet: 255.255.255.0
    dns1: 192.168.1.1
    dns2: 8.8.8.8    

logger:
  baud_rate: 0

api:
  reboot_timeout: 0s

ota:

web_server:
  port: 80

binary_sensor:
  - platform: status
    name: ${board_name}_Status
    
  - platform: gpio
    pin:
      number: GPIO12
      inverted: True
    name: "${board_name}_button"
    on_press:
      - switch.toggle: switch1

output:
  - platform: gpio
    pin: GPIO13
    inverted: True
    id: led1

uart:
  rx_pin: GPIO03
  baud_rate: 4800

status_led:
  pin:
    number: GPIO02
    inverted: True

light:
  - platform: binary
    name: ${board_name}_LED
    output: led1

switch:
  - platform: gpio
    pin: GPIO14
    id: switch1
    icon: mdi:power-socket-eu
    name: ${board_name}_Relay

  - platform: restart
    name: ${board_name}_Restart

sensor:
  - platform: cse7766
    current:
      name: ${board_name}_Current
      icon: mdi:current-ac
      unit_of_measurement: A
    voltage:
      name: ${board_name}_V
      icon: mdi:flash-circle
      unit_of_measurement: V
    power:
      name: ${board_name}_W
      icon: mdi:flash-outline
      unit_of_measurement: W
    update_interval: 15s
      
  - platform: uptime
    name: ${board_name}_Uptime_s
    icon: mdi:clock-outline
    id: uptime_sensor

  - platform: wifi_signal
    name: ${board_name}_WiFi_RSSI
    update_interval: 60s

text_sensor:
  - platform: template
    name: ${board_name}_Uptime
    lambda: |-
      uint32_t dur = id(uptime_sensor).state;
      int dys = 0;
      int hrs = 0;
      int mnts = 0;
      if (dur > 86399) {
        dys = trunc(dur / 86400);
        dur = dur - (dys * 86400);
      }
      if (dur > 3599) {
        hrs = trunc(dur / 3600);
        dur = dur - (hrs * 3600);
      }
      if (dur > 59) {
        mnts = trunc(dur / 60);
        dur = dur - (mnts * 60);
      }
      char buffer[17];
      sprintf(buffer, "%ud %02uh %02um %02us", dys, hrs, mnts, dur);
      return {buffer};
    icon: mdi:clock-start
    update_interval: 15s

time:
  - platform: homeassistant
    id: homeassistant_time