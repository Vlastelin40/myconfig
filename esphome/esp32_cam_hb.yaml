substitutions:
  board_name: esp32_cam_hb
 
esphome:
  name: esp32_cam_hb

esp32:
  board: esp32cam
  
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_pass
  #domain: .locald
  fast_connect: true
  reboot_timeout: 15min
  manual_ip:
    static_ip: 192.168.1.103
    gateway: 192.168.1.1
    subnet: 255.255.255.0
    dns1: 192.168.1.1
    dns2: 8.8.8.8


# Enable logging
logger:
  baud_rate: 0
  
api:
  reboot_timeout: 0s

ota:

web_server:
  port: 80

esp32_camera:
  name: ${board_name}_Camera
  external_clock:
    pin: GPIO0
    frequency: 20MHz
  i2c_pins:
    sda: GPIO26
    scl: GPIO27
  data_pins: [GPIO5, GPIO18, GPIO19, GPIO21, GPIO36, GPIO39, GPIO34, GPIO35]
  vsync_pin: GPIO25
  href_pin: GPIO23
  pixel_clock_pin: GPIO22
  power_down_pin: GPIO32
  resolution: 640x480
  jpeg_quality: 10

binary_sensor:
  - platform: status
    name: ${board_name}_Status

sensor:    
  - platform: uptime
    name: ${board_name}_Uptime_s
    id: uptime_sensor
    update_interval: 15s
    
  - platform: wifi_signal
    name: ${board_name}_WiFi_RSSI
    update_interval: 60s
  
text_sensor:
  - platform: template
    name: ${board_name}_Uptime
    lambda: |-
        int seconds = round(id(uptime_sensor).raw_state);
        int days = seconds / (24 * 3600);
        seconds = seconds % (24 * 3600);
        int hours = seconds / 3600;
        seconds = seconds % 3600;
        int minutes = seconds /  60;
        seconds = seconds % 60;
        return (
          (days ? to_string(days) + "d " : "00d ") +
          (hours ? to_string(hours) + "h " : "00h ") +
          (minutes ? to_string(minutes) + "m " : "00m ") +
          (to_string(seconds) + "s")
        );
    icon: mdi:clock-start
    update_interval: 15s

button:
  - platform: restart
    name: ${board_name}_Restart
  
time:
  - platform: sntp
    id: sntp_time
    timezone: UTC-3
