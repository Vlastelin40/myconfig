substitutions:
  board_name: sonoff_pow_r2_3
  ip_address: 192.168.1.133

esphome:
  name: ${board_name}
  platform: ESP8266
  board: esp01_1m
  on_boot:
    priority: -10
    then:
      - light.turn_on: main_led


wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_pass
  domain: .localdomain
  reboot_timeout: 0s
  manual_ip:
    static_ip: ${ip_address}
    gateway: 192.168.1.1
    subnet: 255.255.255.0

# Enable logging
logger:
  baud_rate: 0

uart:
  rx_pin: RX
  baud_rate: 4800

api:
  reboot_timeout: 0s

ota:

web_server:
  port: 80

output:
  - platform: esp8266_pwm
    id: blue_led
    pin: GPIO13
    inverted: True

light:
  - platform: binary
    name: ${board_name}_StatusLED
    internal: true
    output: blue_led
    id: main_led

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO0
      mode: INPUT_PULLUP
      inverted: True
    name: ${board_name}_Button
    on_press:
      - switch.toggle: relay
      
  - platform: status
    name: ${board_name}_Status

switch:
  - platform: gpio
    name: ${board_name}_Relay
    pin: GPIO12
    id: relay
    on_turn_on:
      then:
        - light.turn_off: main_led
    on_turn_off:
      then:
        - light.turn_on: main_led

  - platform: restart
    name: ${board_name}_Restart

sensor:
  - platform: cse7766
    update_interval: 2s
    current:
      name: ${board_name}_Current
    voltage:
      name: ${board_name}_Voltage
    power:
      name: ${board_name}_Power
      id: power
      on_value_range:
        - above: 4.0
          then:
            - light.turn_on: main_led
        - below: 3.0
          then:
            - light.turn_off: main_led

  - platform: uptime
    name: ${board_name}_Uptime_s
    id: uptime_sensor

  - platform: wifi_signal
    name: ${board_name}_WiFi_RSSI
    update_interval: 60s

text_sensor:
  - platform: template
    name: ${board_name}_Uptime
    lambda: |-
      uint32_t dur = id(uptime_sensor).state;
      int dys = 0;
      int hrs = 0;
      int mnts = 0;
      if (dur > 86399) {
        dys = trunc(dur / 86400);
        dur = dur - (dys * 86400);
      }
      if (dur > 3599) {
        hrs = trunc(dur / 3600);
        dur = dur - (hrs * 3600);
      }
      if (dur > 59) {
        mnts = trunc(dur / 60);
        dur = dur - (mnts * 60);
      }
      char buffer[17];
      sprintf(buffer, "%ud %02uh %02um %02us", dys, hrs, mnts, dur);
      return {buffer};
    icon: mdi:clock-start
    update_interval: 15s

time:
  - platform: homeassistant
    id: homeassistant_time
