substitutions:
  board_name: esp32_pzem_hb

esphome:
  name: ${board_name}
  platform: ESP32
  board: esp-wrover-kit
  comment: ESP32 PZEM004\Dallas node HB

wifi:
  # ssid: !secret wifi_ssid
  # password: !secret wifi_pass
  # domain: .localdomain
  reboot_timeout: 15min
  output_power: 10dB
  #fast_connect: true
  power_save_mode: none
  manual_ip:
    static_ip: 192.168.1.72
    gateway: 192.168.1.1
    subnet: 255.255.255.0
    dns1: 192.168.1.1
    dns2: 8.8.8.8
  networks:
    - ssid: !secret wifi_ssid_hb
      password: !secret wifi_pass
      hidden: true
      bssid: !secret wifi_bssid_hb_iot
      priority: 2
    - ssid: !secret wifi_ssid
      password: !secret wifi_pass
      hidden: false
      bssid: !secret wifi_bssid_hb_main
      priority: 1
    - ssid: !secret wifi_ssid
      password: !secret wifi_pass
      hidden: false
      priority: 0


logger:
  baud_rate: 0
  
api:
  reboot_timeout: 15min

ota:

web_server:
  port: 80

globals:
  - id: total_monthly
    type: float
    restore_value: yes
    initial_value: '0'

  - id: total_daily_globals
    type: float
    restore_value: yes
    initial_value: '0'    

  - id: monthly_day
    type: float
    restore_value: yes
    initial_value: '0'    

  - id: monthly_night
    type: float
    restore_value: yes
    initial_value: '0'    

  - id: daily_day
    type: float
    restore_value: yes
    initial_value: '0'    

  - id: daily_night
    type: float
    restore_value: yes
    initial_value: '0'    

  - id: prev_hour_data
    type: float
    restore_value: yes
    initial_value: '0'    

i2c:
  sda: GPIO21
  scl: GPIO22
  scan: True

uart:
  rx_pin: GPIO03
  tx_pin: GPIO01
  baud_rate: 9600
  stop_bits: 1


dallas:
  - pin: GPIO26
    update_interval: 15s
    id: dallas_node

binary_sensor:
  - platform: status
    name: ${board_name}_Status

text_sensor:
  - platform: template
    name: ${board_name}_Uptime
    lambda: |-
      uint32_t dur = id(uptime_sensor).state;
      int dys = 0;
      int hrs = 0;
      int mnts = 0;
      if (dur > 86399) {
        dys = trunc(dur / 86400);
        dur = dur - (dys * 86400);
      }
      if (dur > 3599) {
        hrs = trunc(dur / 3600);
        dur = dur - (hrs * 3600);
      }
      if (dur > 59) {
        mnts = trunc(dur / 60);
        dur = dur - (mnts * 60);
      }
      char buffer[17];
      sprintf(buffer, "%ud %02uh %02um %02us", dys, hrs, mnts, dur);
      return {buffer};
    icon: mdi:clock-start
    update_interval: 15s

sensor:
  - platform: uptime
    name: ${board_name}_Uptime_s
    id: uptime_sensor
    update_interval: 15s

  - platform: wifi_signal
    name: ${board_name}_WiFi_RSSI
    update_interval: 60s

  - platform: dallas
    address: 0x613C01D075384328
    name: ${board_name}_Breaker_Box
    dallas_id: dallas_node
    accuracy_decimals: 1
    resolution: 12

  - platform: ntc
    sensor: resistance_sensor1
    calibration:
      b_constant: 3435
      reference_temperature: 25째C
      reference_resistance: 10kOhm
    name: ${board_name}_NTC1

  - platform: ntc
    sensor: resistance_sensor2
    calibration:
      b_constant: 3435
      reference_temperature: 25째C
      reference_resistance: 10kOhm
    name: ${board_name}_NTC2

  - platform: ntc
    sensor: resistance_sensor3
    calibration:
      b_constant: 3435
      reference_temperature: 25째C
      reference_resistance: 10kOhm
    name: ${board_name}_NTC3

  - platform: ntc
    sensor: resistance_sensor4
    calibration:
      b_constant: 3435
      reference_temperature: 25째C
      reference_resistance: 10kOhm
    name: ${board_name}_NTC4

  - platform: resistance
    id: resistance_sensor1
    sensor: source_sensor1
    internal: true
    configuration: DOWNSTREAM
    resistor: 9.9kOhm
    reference_voltage:  3.4V
    name: ${board_name}_NTC_Resistance1

  - platform: resistance
    id: resistance_sensor2
    sensor: source_sensor2
    internal: true
    configuration: DOWNSTREAM
    resistor: 9.9kOhm
    reference_voltage:  3.4V
    name: ${board_name}_NTC_Resistance2

  - platform: resistance
    id: resistance_sensor3
    sensor: source_sensor3
    internal: true
    configuration: DOWNSTREAM
    resistor: 9.9kOhm
    reference_voltage:  3.4V
    name: ${board_name}_NTC_Resistance3

  - platform: resistance
    id: resistance_sensor4
    sensor: source_sensor4
    internal: true
    configuration: DOWNSTREAM
    resistor: 9.9kOhm
    reference_voltage:  3.4V
    name: ${board_name}_NTC_Resistance4

  - platform: adc
    pin: GPIO35
    attenuation: 11db
    internal: true
    name: ${board_name}_ADC_1
    id: source_sensor1
    update_interval: never

  - platform: adc
    pin: GPIO34
    attenuation: 11db
    internal: true
    name: ${board_name}_ADC_2
    id: source_sensor2
    update_interval: never

  - platform: adc
    pin: GPIO39
    attenuation: 11db
    internal: true
    name: ${board_name}_ADC_3
    id: source_sensor3
    update_interval: never

  - platform: adc
    pin: GPIO36
    attenuation: 11db
    internal: true
    name: ${board_name}_ADC_4
    id: source_sensor4
    update_interval: never
    
  - platform: pzemac
    current:
      name: ${board_name}_Current
      accuracy_decimals: 1
      # filters:
      # - calibrate_linear:
      #     - 7.466 -> 7.36
      #     - 12.896 -> 12.75      
    voltage:
      name: ${board_name}_Voltage
      accuracy_decimals: 1
      # filters:
      # - calibrate_linear:
      #     - 214.0 -> 214.7
      #     - 212.5 -> 212.8
    energy:
      name: ${board_name}_Energy
      accuracy_decimals: 3
      unit_of_measurement: 'kWh'
      filters:
        - multiply: 0.001      
    power:
      name: ${board_name}_Power
      accuracy_decimals: 0
      id: power
      # filters:
      # - calibrate_linear:
      #     - 2998 -> 3000
      #     - 701 -> 700
      unit_of_measurement: W
    frequency:
      name: ${board_name}_Frequency
      accuracy_decimals: 0
    power_factor:
      name: ${board_name}_Power Factor
      accuracy_decimals: 2
      unit_of_measurement: ' '
      icon: mdi:cosine-wave
    update_interval: 10s

  - platform: total_daily_energy
    id: total_daily_kwh
    name: ${board_name}_Energy_Daily
    power_id: power
    accuracy_decimals: 3
    unit_of_measurement: 'kWh'
    filters:
      - multiply: 0.001
    icon: mdi:calendar-week-begin
    
  - platform: template
    name: ${board_name}_Energy_Monthly
    lambda: return id(total_monthly) + id(total_daily_kwh).state;
    update_interval: 10s
    unit_of_measurement: kWh
    accuracy_decimals: 3
    icon: mdi:calendar-month

  - platform: template
    name: ${board_name}_Power_kW
    lambda: return (id(power).state)*0.001;
    accuracy_decimals: 3
    update_interval: 10s
    unit_of_measurement: 'kW'
    icon: mdi:lightning-bolt-outline

  - platform: template
    name: ${board_name}_Daily_Night_kWh
    lambda: return id(daily_night);
    accuracy_decimals: 3
    update_interval: 10s
    unit_of_measurement: 'kWh'
    
  - platform: template
    name: ${board_name}_Daily_Day_kWh
    lambda: return id(daily_day);
    accuracy_decimals: 3
    update_interval: 10s
    unit_of_measurement: 'kWh'

  - platform: template
    name: ${board_name}_Monthly_Night_kWh
    lambda: return id(monthly_night);
    accuracy_decimals: 3
    update_interval: 10s
    unit_of_measurement: 'kWh'
    
  - platform: template
    name: ${board_name}_Monthly_Day_kWh
    lambda: return id(monthly_day);
    accuracy_decimals: 3
    update_interval: 10s
    unit_of_measurement: 'kWh'

  - platform: template
    name: ${board_name}_Daily_Globals
    lambda: return id(total_daily_globals);
    accuracy_decimals: 3
    update_interval: 10s
    unit_of_measurement: 'kWh'

  - platform: template
    name: ${board_name}_prev_hour_data
    lambda: return id(prev_hour_data);
    accuracy_decimals: 3
    update_interval: 10s
    unit_of_measurement: 'kWh'      
    
  - platform: bme680
    temperature:
      name: ${board_name}_Temperature
      oversampling: 16x
      accuracy_decimals: 1
    pressure:
      name: ${board_name}_Pressure
      accuracy_decimals: 0
    humidity:
      name: ${board_name}_Humidity
      accuracy_decimals: 0
    gas_resistance:
      name: ${board_name}_Resistance
      accuracy_decimals: 0
    address: 0x77
    update_interval: 30s    
    
switch:
  - platform: restart
    name: ${board_name}_Restart

  - platform: gpio
    pin: GPIO16
    internal: true
    id: ntc1_vcc    
    name: ${board_name}_NTC1_VCC

  - platform: gpio
    pin: GPIO17
    internal: true
    id: ntc2_vcc    
    name: ${board_name}_NTC2_VCC

  - platform: gpio
    pin: GPIO18
    internal: true
    id: ntc3_vcc    
    name: ${board_name}_NTC3_VCC

  - platform: gpio
    pin: GPIO19
    internal: true
    id: ntc4_vcc    
    name: ${board_name}_NTC4_VCC

  - platform: template
    name: ${board_name}_Reset_Monthy
    turn_on_action: 
      - globals.set:
          id: total_monthly
          value: '0'
  - platform: template
    name: ${board_name}_Reset_Monthly_Day
    turn_on_action: 
      - globals.set:
          id: monthly_day
          value: '0'
  - platform: template
    name: ${board_name}_Reset_Monthly_Night
    turn_on_action: 
      - globals.set:
          id: monthly_night
          value: '0'
  - platform: template
    name: ${board_name}_Reset_Daily_Day
    turn_on_action: 
      - globals.set:
          id: daily_day
          value: '0'
  - platform: template
    name: ${board_name}_Reset_Daily_Night
    turn_on_action: 
      - globals.set:
          id: daily_night
          value: '0'          
  - platform: template
    name: ${board_name}_Reset_Prev_Hour_Data
    turn_on_action: 
      - globals.set:
          id: prev_hour_data
          value: '0'

interval:
  - interval: 15s
    then:
      - switch.turn_on: ntc1_vcc
      - switch.turn_on: ntc2_vcc
      - switch.turn_on: ntc3_vcc
      - switch.turn_on: ntc4_vcc
      - delay: 2s
      - component.update: source_sensor1
      - component.update: source_sensor2
      - component.update: source_sensor3
      - component.update: source_sensor4
      - delay: 2s
      - component.update: source_sensor1
      - component.update: source_sensor2
      - component.update: source_sensor3
      - component.update: source_sensor4      
      - switch.turn_off: ntc1_vcc
      - switch.turn_off: ntc2_vcc
      - switch.turn_off: ntc3_vcc
      - switch.turn_off: ntc4_vcc

time:
  - platform: homeassistant
    id: homeassistant_time
  - platform: sntp
    id: sntp_time
    timezone: Europe/Moscow
    on_time:
    - seconds: 30
      minutes: 59
      hours: 23
      then:
        - logger.log: "-------> Monthly Increase by Daily Total"
        - lambda: id(total_monthly) = id(total_monthly) + id(total_daily_kwh).state;
    - seconds: 30
      minutes: 0
      hours: 0
      days_of_month: 21
      then:
        - logger.log: "-------> Monthly Globals Reset on 21st of each month"
        - lambda: id(total_monthly) = 0;
        - lambda: id(monthly_day) = 0;
        - lambda: id(monthly_night) = 0;
    - seconds: 56
      minutes: 59
      hours: /1
      then:
        - logger.log: "-------> Daily Globals Save"
        - lambda: id(total_daily_globals) = id(total_daily_kwh).state;
    - seconds: 58
      minutes: 59
      hours: /1
      #minutes: /1
      then:
        - logger.log: "-------> Hourly Routine start"
        - logger.log:
            format: "-------> Hourly Routine INPUT: daily_day %f, daily_night %f, monthly_day %f, monthly_night %f, total_daily_globals %f, prev_hour_data %f"
            args: [ 'id(daily_day)', 'id(daily_night)', 'id(monthly_day)', 'id(monthly_night)', 'id(total_daily_globals)', 'id(prev_hour_data)' ]
        - if:
              condition:
                and:
                  - lambda: 'return id(sntp_time).now().hour >=7;'
                  - lambda: 'return id(sntp_time).now().hour <=22;'
              then: 
                - logger.log: "-------> Hourly Routine DAY Calculations"
                - lambda: id(monthly_day) = id(monthly_day) + id(total_daily_globals) - id(prev_hour_data);
                - lambda: id(daily_day) = id(daily_day) + id(total_daily_globals) - id(prev_hour_data);
              else:
                - logger.log: "-------> Hourly Routine Night Calculations"
                - lambda: id(monthly_night) = id(monthly_night) + id(total_daily_globals) - id(prev_hour_data);
                - lambda: id(daily_night) = id(daily_night) + id(total_daily_globals) - id(prev_hour_data);
        - logger.log: "-------> Hourly Routine General Calculations"
        - lambda: id(prev_hour_data) = id(total_daily_globals);
        - logger.log:
            format: "-------> Hourly Routine RESULT: daily_day %f, daily_night %f, monthly_day %f, monthly_night %f, total_daily_globals %f, prev_hour_data %f"
            args: [ 'id(daily_day)', 'id(daily_night)', 'id(monthly_day)', 'id(monthly_night)', 'id(total_daily_globals)', 'id(prev_hour_data)' ]
    - seconds: 07
      minutes: 00
      hours: 00
      then:
        - lambda: id(daily_day) = 0;
        - lambda: id(daily_night) = 0;
        - lambda: id(prev_hour_data) = 0;