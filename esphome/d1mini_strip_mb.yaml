substitutions:
  board_name: d1mini_strip_mb

esphome:
  name: ${board_name}
  comment: D1 Mini LED Strip MB

esp8266:
  board: d1_mini
  framework:
    version: 2.7.4  
  
wifi:
  ssid: !secret wifi_ssid_mb
  password: !secret wifi_pass
  domain: .local
  reboot_timeout: 15min
  fast_connect: true
  manual_ip:
    static_ip: 192.168.1.89
    gateway: 192.168.1.1
    subnet: 255.255.255.0
    dns1: 192.168.1.1
    dns2: 8.8.8.8

# Enable logging
logger:
  baud_rate: 0

# Enable Home Assistant API
api:
  reboot_timeout: 0s
  services:
    - service: led_control
      variables:
        start_led: int
        end_led: int
        # red: int
        # green: int
        # blue: int
        # brightness: int
      then:
        - light.turn_off: my_light
        - light.addressable_set:
            id: my_light
            range_from: !lambda 'return start_led;'
            range_to: !lambda 'return end_led;'
        - light.turn_on: my_light

ota:

# web_server:
#   port: 80

light:
  - platform: fastled_clockless
    chipset: WS2812B
    pin: GPIO14
    id: my_light
    num_leds: 147
    rgb_order: GRB
    name: ${board_name}_LED
    effects:
      # Use default parameters:
      - random:
      - strobe:
      - flicker:
      - addressable_rainbow:
      - addressable_color_wipe:
      - addressable_scan:
      - addressable_twinkle:
      - addressable_random_twinkle:
      - addressable_fireworks:
      - addressable_flicker:


button:
  - platform: restart
    name: ${board_name}_Restart

binary_sensor:
  - platform: status
    name: ${board_name}_Status

text_sensor:
  - platform: template
    name: ${board_name}_Uptime
    lambda: |-
      uint32_t dur = id(uptime_sensor).state;
      int dys = 0;
      int hrs = 0;
      int mnts = 0;
      if (dur > 86399) {
        dys = trunc(dur / 86400);
        dur = dur - (dys * 86400);
      }
      if (dur > 3599) {
        hrs = trunc(dur / 3600);
        dur = dur - (hrs * 3600);
      }
      if (dur > 59) {
        mnts = trunc(dur / 60);
        dur = dur - (mnts * 60);
      }
      char buffer[17];
      sprintf(buffer, "%ud %02uh %02um %02us", dys, hrs, mnts, dur);
      return {buffer};
    icon: mdi:clock-start
    update_interval: 15s

  - platform: wifi_info
    ip_address:
      name: ${board_name}_IP
    ssid:
      name: ${board_name}_SSID
    bssid:
      name: ${board_name}_BSSID
    mac_address:
      name: ${board_name}_Mac
    scan_results:
      name: ${board_name}_Latest_Scan_Results

  - platform: version
    name: ${board_name}_ESPHome_Version
    hide_timestamp: true    

sensor:
  - platform: uptime
    name: ${board_name}_Uptime_s
    id: uptime_sensor
    update_interval: 15s

  - platform: wifi_signal
    name: ${board_name}_WiFi_RSSI
    update_interval: 60s
  
time:
  - platform: sntp
    id: sntp_time
    timezone: UTC-3