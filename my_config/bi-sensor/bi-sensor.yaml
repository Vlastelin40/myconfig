
#{{ 'on' if is_state('sensor.fibaro_system_unknown_type_0701_id_4001_access_control', 23) else 'off' }}

  - platform: template
    sensors:

      updater_supervisor:
        friendly_name: 'Updater - Supervisor'
        device_class: problem
        value_template: "{{ state_attr('sensor.supervisor_updates', 'current_version') != state_attr('sensor.supervisor_updates', 'newest_version') }}"
        availability_template: "{{ (states('sensor.supervisor_updates') | int(-1)) > -1 }}"
  
      updater_addons:
        friendly_name: 'Updater - Addons'
        device_class: problem
        value_template: "{{ states('sensor.supervisor_updates') | int > 0 }}"

      ro_pump_status:
        friendly_name: RO Pump Status
        icon_template: mdi:water-pump
        value_template: "{{ is_state('binary_sensor.0x158d000423f316_contact','off') }}"

      # ro_raw_flow_manual:
      #   icon_template: mdi:water-pump
      #   value_template: "{{as_timestamp(now())|int-as_timestamp(states.sensor.esp32_node_k_raw.last_changed)|int <2 }}"

      # ro_mineralized_flow_manual:
      #   icon_template: mdi:filter-menu
      #   value_template: "{{as_timestamp(now())|int-as_timestamp(states.sensor.esp32_node_k_mineralized.last_changed)|int <2 }}"

      # ro_non_mineralized_flow_manual:
      #   icon_template: mdi:cup-water
      #   value_template: "{{as_timestamp(now())|int-as_timestamp(states.sensor.esp32_node_k_nonmineralized.last_changed)|int <2 }}"

      # ro_postmembrane_flow_manual:
      #   icon_template: mdi:cup-off
      #   value_template: "{{as_timestamp(now())|int-as_timestamp(states.sensor.esp32_node_k_postmembrane.last_changed)|int <2 }}"

      bed_led_enable:
        value_template: "{{ states('sensor.0x4cf8cdf3c77271d_illuminance')|int < 250 and is_state('light.square_led_v','off')}}"
        icon_template: >
          {% if is_state('binary_sensor.bed_led_enable','on') %}
          mdi:brightness-5
          {% else %}
          mdi:brightness-4
          {% endif %}
        
      bright_light_allowed:
        value_template: "{{ (is_state('binary_sensor.workday_sensor','on') and is_state('binary_sensor.tod_day','on')) or (is_state('binary_sensor.workday_sensor','off') and is_state('binary_sensor.tod_day_non_working','on')) }}"
        icon_template: >
          {% if is_state('binary_sensor.bright_light_allowed','on') %}
          mdi:brightness-5
          {% else %}
          mdi:brightness-4
          {% endif %}

      noise_allowed:
        value_template: >-
          {% set x = states('sensor.time') %}
          {% set hour = now().strftime("%H") | int  %}
          {{ states('binary_sensor.workday_sensor') == 'on' and ( ( hour >= 9 and hour < 13 ) or ( hour >= 15 and hour < 19) ) }}
        icon_template: >
          {% if is_state('binary_sensor.noise_allowed','on') %}
          mdi:volume-high
          {% else %}
          mdi:volume-off
          {% endif %}

      someone_showering:
        friendly_name: Someone is showering
        value_template: >
          {% set humidity = states('sensor.0x158d00020d7c3a_humidity') | float(0) %}
          {% set treshold = 1.05 * state_attr('sensor.humidity_bathroom_stats', "median") | float(0) %}
          {% set derivative = states('sensor.humidity_bathroom_derivative') | float(0) %}
          {{ humidity > treshold and derivative > 0.25 and is_state('binary_sensor.0x158d0002a14c5e_contact','off') }}
        device_class: occupancy

      # hot_water_24h:
      #   friendly_name: No Hot Water Sensor Update 24h
      #   value_template: "{{ states('sensor.time') and as_timestamp(now())- as_timestamp(states.binary_sensor['0x158d000232de79_contact'].last_changed) > 24*60*60 }}"
      #   device_class: moving

      # cold_water_24h:
      #   friendly_name: No Cold Water Sensor Update 24h
      #   value_template: "{{ states('sensor.time') and as_timestamp(now())- as_timestamp(states.binary_sensor['0x158d000236fcd5_contact'].last_changed) > 24*60*60 }}"
      #   device_class: moving

      motion_1h:
        friendly_name: Any motion detected in last hour
        value_template: >
          {{ is_state("group.motioninternal", "on") }}
        delay_off: "01:00:00"
        device_class: motion
  
      someone_home_1h:
        friendly_name: Someone at home in the last hour
        value_template: >
          {{ is_state("binary_sensor.motion_1h", "on")
              or is_state("group.persons", "home") }}
        device_class: occupancy

      gw3_devices_unavailability:
        friendly_name: GW3 Devices Unvailability Flag
        value_template: "{{ expand('group.gw3_devices') | selectattr('state','in',['unavailable','unknown']) | map(attribute='name') | list | count > 0}}"
        device_class: problem

  - platform: trend
    sensors:
      bathroom_humidity_rising:
        entity_id: sensor.0x158d00020d7c3a_humidity
        friendly_name: Humidity B Rising
        sample_duration: 7200
        min_gradient: 0.02
      bathroom_humidity_falling:
        entity_id: sensor.0x158d00020d7c3a_humidity
        friendly_name: Humidity B Falling
        sample_duration: 7200
        min_gradient: -0.01
      
      pressure_rising_fast_air_valve:
        entity_id: sensor.esp32_node_k_pressure
        friendly_name: Pressure Rising Fast (Air Valve))
        sample_duration: 3600
        max_samples: 10
        min_gradient: 0.00027777777778
      
      pressure_rising_fast:
        entity_id: sensor.0x158d000233fb72_pressure
        friendly_name: Pressure Rising Fast
        sample_duration: 3600
        max_samples: 10
        min_gradient: 0.00027777777778
      pressure_rising_slow:
        entity_id: sensor.0x158d000233fb72_pressure
        friendly_name: Pressure Rising Slow
        sample_duration: 3600
        max_samples: 10
        min_gradient: 0.00013888888889
      pressure_falling_fast:
        entity_id: sensor.0x158d000233fb72_pressure
        friendly_name: Pressure Falling Fast
        sample_duration: 3600
        max_samples: 10
        min_gradient: -0.00027777777778
      pressure_falling_slow:
        entity_id: sensor.0x158d000233fb72_pressure
        friendly_name: Pressure Falling Slow
        sample_duration: 3600
        max_samples: 10
        min_gradient: -0.00013888888889
      
      temp_falling:
        entity_id: sensor.0x158d0001e8995a_temperature
        sample_duration: 7200
        min_gradient: -0.0008
        max_samples: 10
        device_class: cold

      temp_rising:
        entity_id: sensor.0x158d0001e8995a_temperature
        sample_duration: 7200
        min_gradient: 0.0008
        max_samples: 10
        device_class: heat


  - platform: command_line
    command: 'curl -4 --silent -XGET --max-time 3 -I https://api.telegram.org|head -1|grep -q "HTTP/1.1 302 Moved Temporarily" && (echo "ON") || (echo "OFF")'
    name: telegram_api
    scan_interval: 60
    command_timeout: 10

  - platform: template
    sensors:
      update_available:
        friendly_name: HA Update Available
        device_class: occupancy
        value_template: "{{(states('sensor.ha_latest_version') > states('sensor.ha_installed_version')) and (states('sensor.ha_latest_version') not in ['unavailable', 'unknown', 'none'])}}"

      sandra_home:
        friendly_name: Sandra home
        value_template: "{{is_state('person.sandra','home')}}"
        delay_off: 120
        
      toilet_usage:
        friendly_name: Toilet Usage
        icon_template: mdi:toilet
        value_template: "{{ is_state('binary_sensor.0x158d000232ddd6_contact','on') }}"
        #device_class: occupancy

      rain:
        friendly_name: Rain
        icon_template: >
          {% if is_state('binary_sensor.rain','on') %}
          mdi:weather-pouring
          {% else %}
          mdi:weather-cloudy
          {% endif %}
        delay_off:
          seconds: 15
        delay_on:
          seconds: 15
        value_template: "{{ is_state('binary_sensor.0x158d00035c6905_contact','on') }}"
        device_class: moisture

      doorbell:
        friendly_name: Doorbell
        icon_template: mdi:bell-ring
        delay_off:
          seconds: 3
        value_template: "{{ is_state('binary_sensor.0x158d0003262ba8_contact','off') }}"
  
      # doorbell_mute:
      #   friendly_name: Doorbell Mute
      #   value_template: "{{ is_state('input_boolean.doorbell_mute','on') }}"
      #   icon_template: >
      #     {% if is_state('binary_sensor.doorbell_mute','off') %}
      #     mdi:bell-ring
      #     {% else %}
      #     mdi:bell-off
      #     {% endif %}
          
      # domofon_mute:
      #   friendly_name: Domofon Mute
      #   value_template: "{{ is_state('input_boolean.domofon_mute','on') }}"
      #   icon_template: >
      #     {% if is_state('binary_sensor.domofon_mute','off') %}
      #     mdi:volume-high
      #     {% else %}
      #     mdi:volume-off
      #     {% endif %}

      domofon_auto_open:
        friendly_name: Domofon Auto Open
        icon_template: mdi:check-all
        value_template: "{{ is_state('input_boolean.domofon_auto_open','on') }}"

      domofon_auto_open_once:
        friendly_name: Domofon Auto Open Once
        icon_template: mdi:check
        value_template: "{{ is_state('input_boolean.domofon_auto_open_once','on') }}"
      
      domofon_ignore:
        friendly_name: Domofon Ignore
        icon_template: mdi:phone-missed
        value_template: "{{ is_state('input_boolean.domofon_ignore','on') }}"

      monitor_brix_v:
        friendly_name: Dell LCD status
        icon_template: mdi:monitor
        value_template: "{{ states('sensor.0x158d0003600ea4_power')|float > 5 }}"

      tv_v:
        friendly_name: TV V Status
        icon_template: mdi:television
        value_template: "{{ is_state('binary_sensor.0x158d000236fdc9_contact','on') }}"

      mi_box_v:
        friendly_name: Mi Box V Status
        icon_template: mdi:play-network
        value_template: "{{ is_state_attr('device_tracker.mi_box_v','vlan',0)}}"

      tv_k:
        friendly_name: TV K Status
        icon_template: mdi:television-box
        value_template: "{{ is_state('binary_sensor.0x158d0002a1a47a_contact','on') }}"

      mi_stick_k:
        friendly_name: Mi Stick K Status
        icon_template: mdi:youtube-tv
        value_template: "{{ is_state_attr('device_tracker.mi_stick_k','vlan',0)}}"

      breather_v:
        friendly_name: Breather V Status
        icon_template: mdi:power
        value_template: "{{ states('sensor.0x158d000344998e_power')|float > 5 }}"

      breather_s:
        friendly_name: Breather S Status
        icon_template: mdi:power
        value_template: "{{ states('sensor.0x158d00036148b9_power')|float > 5 }}"

      breather_mb:
        friendly_name: Breather MB Status
        icon_template: mdi:power
        value_template: "{{ states('sensor.0x158d000345119e_power')|float > 5 }}"

      washer_b:
        friendly_name: Washing machine status
        delay_off:
          minutes: 2
        value_template: "{{ states('sensor.sonoff_pow_r2_1_power')|float > 5 }}"
        icon_template: >
          {% if is_state("binary_sensor.washer_b", "on") %}
            mdi:washing-machine
          {% else %}
            mdi:washing-machine-off
          {% endif %}

      fridge_hb:
        friendly_name: Fridge status
        icon_template: mdi:fridge
        value_template: "{{ states('sensor.0x158d0003539447_power')|float > 5 }}"
      
      kettle_k:
        friendly_name: Kettle status
        icon_template: mdi:kettle
        value_template: "{{ states('sensor.0x158d00028c9875_power')|float > 10 }}"
      
      microwave_k:
        friendly_name: Microwave status
        icon_template: mdi:microwave
        value_template: "{{ states('sensor.0x158d00028a54e4_power')|float > 10 }}"



      ippon_1200_status:
        friendly_name: Ippon 1200 Status HB
        value_template: "{{ states('sensor.ippon_1200_status_data') not in ['none','unknown','unavailable'] }}"
        icon_template: mdi:battery
        device_class: power
      
      ippon_1050_status:
        friendly_name: Ippon 1050 Status MB
        value_template: "{{ states('sensor.ippon_1050_status_data') not in ['none','unknown','unavailable'] }}"
        icon_template: mdi:battery
        device_class: power

      cyber650_k_status:
        friendly_name: Cyber 650 Status K
        value_template: "{{ states('sensor.cyber650_k_status_data') not in ['none','unknown','unavailable'] }}"
        icon_template: mdi:battery
        device_class: power

      ippon_650_status:
        friendly_name: Ippon 650 Status S
        value_template: "{{ states('sensor.ippon_650_status_data') not in ['none','unknown','unavailable'] }}"
        icon_template: mdi:battery
        device_class: power


      family_home:
        friendly_name: Family Home
        device_class: presence
        value_template: "{{ states('sensor.time') and (is_state('person.dima','home') or is_state('person.sandra','home') or is_state('person.vova','home') or is_state('person.sasha','home')) }}"

      motion_hb:
        friendly_name: Motion HB
        device_class: motion
        value_template: "{{ is_state('binary_sensor.0x158d0002b482e9_motion', 'on') or is_state('binary_sensor.0x158d0001e05856_motion', 'on') }}"
        icon_template: >
          {% if is_state('binary_sensor.motion_hb','on') %}
          mdi:run
          {% else %}
          mdi:walk
          {% endif %}

      motion_k:
        friendly_name: Motion K
        device_class: motion
        value_template: "{{ is_state('binary_sensor.0x158d0002b4729d_motion', 'on') or is_state('binary_sensor.0x158d0002b48381_motion', 'on') }}"
        icon_template: >
          {% if is_state('binary_sensor.motion_k','on') %}
          mdi:run
          {% else %}
          mdi:walk
          {% endif %}

      motion_s:
        friendly_name: Motion S
        device_class: motion
        value_template: "{{ is_state('binary_sensor.0x158d000224f89f_motion', 'on') or is_state('binary_sensor.0x158d0003140824_motion', 'on') }}"
        icon_template: >
          {% if is_state('binary_sensor.motion_s','on') %}
          mdi:run
          {% else %}
          mdi:walk
          {% endif %}

      motion_v:
        friendly_name: Motion V
        device_class: motion
        value_template: "{{ is_state('binary_sensor.0x158d000236bb94_motion', 'on') or is_state('binary_sensor.d1mini_bed_leds_motion_dima', 'on')  or is_state('binary_sensor.d1mini_bed_leds_motion_sandra', 'on')}}"
        icon_template: >
          {% if is_state('binary_sensor.motion_v','on') %}
          mdi:run
          {% else %}
          mdi:walk
          {% endif %}

      motion_hs:
        friendly_name: Motion HS
        device_class: motion
        value_template: "{{ is_state('binary_sensor.0x158d0001ae9f61_motion', 'on') or is_state('binary_sensor.0x158d0002b43ad4_motion', 'on') }}"
        icon_template: >
          {% if is_state('binary_sensor.motion_hs','on') %}
          mdi:run
          {% else %}
          mdi:walk
          {% endif %}

      bottom_lock:
        friendly_name: Bottom Lock
        device_class: lock
        value_template: "{{is_state('binary_sensor.0x158d0002a1a4b2_contact','on')}}"
        delay_off:
          seconds: 2
        delay_on:
          seconds: 2
        icon_template: >
          {% if is_state('binary_sensor.0x158d0002a1a4b2_contact','on') %}
          mdi:lock-open-variant
          {% else %}
          mdi:lock
          {% endif %}
      top_lock:
        friendly_name: Top Lock
        device_class: lock
        value_template: "{{is_state('binary_sensor.0x158d0002b7c2c8_contact','on')}}"
        delay_off:
          seconds: 2
        delay_on:
          seconds: 2
        icon_template: >
          {% if is_state('binary_sensor.0x158d0002b7c2c8_contact','on') %}
          mdi:lock-open-variant-outline
          {% else %}
          mdi:lock-outline
          {% endif %}
          
      ice_alarm_current:
        friendly_name: Ice Alarm Current
        device_class: cold
        value_template: "{{ 1 > states('sensor.esp32_node_mb_outside')|float > -3}}"

      ice_alarm_0d:
        friendly_name: Ice Alarm Today
        device_class: cold
        value_template: "{{ 1 > states('sensor.dark_sky_daytime_high_temperature_0d')|float > -3}}"

      ice_alarm_1d:
        friendly_name: Ice Alarm Tomorrow
        device_class: cold
        value_template: "{{ 1 > states('sensor.dark_sky_daytime_high_temperature_1d')|float > -3}}"


  - platform: mqtt
    name: SLS Gateway State
    state_topic: "sls_gateway/bridge/state"
    device_class: connectivity
    payload_on: online
    payload_off: offline
    # json_attributes_topic: "sls_gateway/bridge/config"
    # json_attributes_template: "{{ value_json | tojson }}"
    
  - platform: mqtt
    name: Pinhole Camera Status
    state_topic: "camera/motioneye_cam_status_pinhole"
    device_class: connectivity

  - platform: mqtt
    name: Digma100 Camera Status
    state_topic: "camera/motioneye_cam_status_digma100"
    device_class: connectivity


  # - platform: command_line
  #   name: GW3 HS State
  #   command: nmap -p 1883 192.168.1.199 | grep "open" >> /dev/null && echo ON || echo OFF
  #   scan_interval: 300
  # - platform: command_line
  #   name: GW3 HB State
  #   command: nmap -p 1883 192.168.1.236 | grep "open" >> /dev/null && echo ON || echo OFF
  #   scan_interval: 300
  # - platform: command_line
  #   name: GW3 S State
  #   command: nmap -p 1883 192.168.1.215 | grep "open" >> /dev/null && echo ON || echo OFF
  #   scan_interval: 300
    
  # - platform: command_line
  #   command: /bin/bash -c "(echo > /dev/tcp/192.168.1.199/1883) > /dev/null 2>&1 && echo ON || echo OFF"
  #   value_template: '{{ value }}'
  #   name: GW3 HS State 2
  #   scan_interval: 60
  # - platform: command_line
  #   command: /bin/bash -c "(echo > /dev/tcp/192.168.1.236/1883) > /dev/null 2>&1 && echo ON || echo OFF"
  #   value_template: '{{ value }}'
  #   name: GW3 HB State 2
  #   scan_interval: 60
  # - platform: command_line
  #   command: /bin/bash -c "(echo > /dev/tcp/192.168.1.215/1883) > /dev/null 2>&1 && echo ON || echo OFF"
  #   value_template: '{{ value }}'
  #   name: GW3 S State 2
  #   scan_interval: 60

  # - platform: command_line
  #   name: GW3 HS State 3
  #   command_timeout: 30
  #   scan_interval: 120
  #   command: 'echo -en "\x10\x0d\x00\x04MQTT\x04\x00\x00\x00\x00\x01a" | nc 192.168.1.199 1883 | hd | grep -o 20 > /dev/null 2>&1 && echo ok || echo fail'
  #   payload_on: "ok"
  #   payload_off: "fail"

  # - platform: command_line
  #   name: GW3 HB State 3
  #   command_timeout: 30
  #   scan_interval: 120
  #   command: 'echo -en "\x10\x0d\x00\x04MQTT\x04\x00\x00\x00\x00\x01a" | nc 192.168.1.236 1883 | hd | grep -o 20 > /dev/null 2>&1 && echo ok || echo fail'
  #   payload_on: "ok"
  #   payload_off: "fail"
    
  # - platform: command_line
  #   name: GW3 S State 3
  #   command_timeout: 30
  #   scan_interval: 120
  #   command: 'echo -en "\x10\x0d\x00\x04MQTT\x04\x00\x00\x00\x00\x01a" | nc 192.168.1.215 1883 | hd | grep -o 20 > /dev/null 2>&1 && echo ok || echo fail'
  #   payload_on: "ok"
  #   payload_off: "fail"
    
  # - platform: command_line
  #   name: GW3 K State 3
  #   command_timeout: 30
  #   scan_interval: 120
  #   command: 'echo -en "\x10\x0d\x00\x04MQTT\x04\x00\x00\x00\x00\x01a" | nc 192.168.1.238 1883 | hd | grep -o 20 > /dev/null 2>&1 && echo ok || echo fail'
  #   payload_on: "ok"
  #   payload_off: "fail"    
  
  
  
  - platform: template
    sensors: 
      motion_timer_k:
        friendly_name: Motion (15m) K
        value_template: "{{ is_state('binary_sensor.0x158d0002b4729d_motion','on') or is_state('binary_sensor.0x158d0002b48381_motion','on') or is_state('sensor.0x158d0002a2412d_action','vibration') or is_state('sensor.0x158d0002a2412d_action','tilt') }}"
        delay_off:
          minutes: 15
        device_class: motion
      motion_timer_st:
        friendly_name: Motion (2m) St
        value_template: "{{ is_state('binary_sensor.0x158d0001aea602_motion','on') }}"
        delay_off:
          minutes: 2
        device_class: motion
      motion_timer_entr_hb:
        friendly_name: Motion (30s) Entrance HB
        value_template: "{{ is_state('binary_sensor.0x158d0001e05856_motion','on') }}"
        delay_off:
          seconds: 30
        device_class: motion
      motion_timer_hb:
        friendly_name: Motion (1m) HB
        value_template: "{{ is_state('binary_sensor.0x158d0001e05856_motion','on') or is_state('binary_sensor.0x158d0002b482e9_motion','on') }}"
        delay_off:
          minutes: 1
        device_class: motion
      motion_timer_b:
        friendly_name: Motion (15m) B
        value_template: "{{ is_state('binary_sensor.0x158d000236bc6d_motion','on') }}"
        delay_off:
          minutes: 15
        device_class: motion
      motion_timer_t:
        friendly_name: Motion (15m) T
        value_template: "{{ is_state('binary_sensor.0x158d0001e54280_motion','on') }}"
        delay_off:
          minutes: 15
        device_class: motion