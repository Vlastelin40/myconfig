substitutions:
  board_name: sonoff_dual_t

esphome:
  name: ${board_name}
  platform: ESP8266
  board: esp01_1m
  board_flash_mode: DIO
  comment: Sonoff Dual R2 Toilet Heaters

wifi:
  ssid: !secret wifi_ssid_k
  password: !secret wifi_pass
  domain: .localdomain
  reboot_timeout: 10min
  fast_connect: true
  power_save_mode: none
  manual_ip:
    static_ip: 192.168.1.70
    gateway: 192.168.1.1
    subnet: 255.255.255.0
    dns1: 192.168.1.1
    dns2: 8.8.8.8

logger:
  baud_rate: 0
  
api:
  reboot_timeout: 0s

ota:

web_server:
  port: 80

i2c:
  sda: GPIO00
  scl: GPIO09
  scan: True

dallas:
  - pin: GPIO03
    update_interval: 5s
    id: dallas_node

# output:
#   - platform: esp8266_pwm
#     id: blue_led
#     pin: GPIO13
#     inverted: True

# light:
#   - platform: binary
#     name: ${board_name}_StatusLED
#     #internal: true
#     output: blue_led
#     id: main_led

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO10
      mode: INPUT_PULLUP
      inverted: True
    name: ${board_name}_Button
    #toggle both relays on push
    on_press:
      - switch.toggle: relay1
      - switch.toggle: relay2

  - platform: status
    name: ${board_name}_Status

switch:
  - platform: gpio
    name: ${board_name}_relay1
    pin: GPIO12
    id: relay1
  - platform: gpio
    name: ${board_name}_relay2
    pin: GPIO05
    id: relay2

  - platform: restart
    name: ${board_name}_Restart

status_led:
  pin:
    number: GPIO13
    #inverted: yes

climate:
  - platform: bang_bang
    visual:
      min_temperature: 22 °C
      max_temperature: 27 °C
      temperature_step: 1 °C  
    name: ${board_name}_Wall_Heater
    sensor: bme_temperature
    default_target_temperature_low: 23 °C
    default_target_temperature_high: 24 °C
    heat_action:
      - switch.turn_on: relay1
    idle_action:
      - switch.turn_off: relay1

  - platform: bang_bang
    visual:
      min_temperature: 22 °C
      max_temperature: 27 °C
      temperature_step: 1 °C  
    name: ${board_name}_Pipe_Heater
    sensor: dallas_temperature_2
    default_target_temperature_low: 23 °C
    default_target_temperature_high: 24 °C
    heat_action:
      - switch.turn_on: relay2
    idle_action:
      - switch.turn_off: relay2


sensor:
  - platform: uptime
    name: ${board_name}_Uptime_s
    id: uptime_sensor

  - platform: wifi_signal
    name: ${board_name}_WiFi_RSSI
    update_interval: 60s

  - platform: bme280
    temperature:
      name: ${board_name}_Temperature
      oversampling: 16x
      id: bme_temperature
    pressure:
      name: ${board_name}_Pressure
      id: bme_pressure
    humidity:
      name: ${board_name}_Humidity
      id: bme_humidity
    address: 0x76
    update_interval: 15s

  - platform: dallas
    address: 0x270000000384D828
    dallas_id: dallas_node
    name: ${board_name}_dallas_long
    accuracy_decimals: 2
    resolution: 12
    id: dallas_temperature_1

  - platform: dallas
    address: 0x903C01F096CF1F28
    dallas_id: dallas_node
    name: ${board_name}_dallas_short
    accuracy_decimals: 2
    resolution: 12
    id: dallas_temperature_2

  - platform: template
    name: ${board_name}_dallas_delta
    lambda: |-
      return ((id(dallas_temperature_1).state) - (id(dallas_temperature_2).state));
    unit_of_measurement: degC
    device_class: temperature
    accuracy_decimals: 2
    update_interval: 5s
  
text_sensor:
  - platform: template
    name: ${board_name}_Uptime
    lambda: |-
      uint32_t dur = id(uptime_sensor).state;
      int dys = 0;
      int hrs = 0;
      int mnts = 0;
      if (dur > 86399) {
        dys = trunc(dur / 86400);
        dur = dur - (dys * 86400);
      }
      if (dur > 3599) {
        hrs = trunc(dur / 3600);
        dur = dur - (hrs * 3600);
      }
      if (dur > 59) {
        mnts = trunc(dur / 60);
        dur = dur - (mnts * 60);
      }
      char buffer[17];
      sprintf(buffer, "%ud %02uh %02um %02us", dys, hrs, mnts, dur);
      return {buffer};
    icon: mdi:clock-start
    update_interval: 15s

time:
  - platform: homeassistant
    id: homeassistant_time