substitutions:
  board_name: esp32_node_b
  node_name: esp32-node-b

esphome:
  name: ${node_name}
  comment: ESP32 TH Relay6ch LED Node V
  platformio_options:
    board_build.f_cpu: 81000000L
    
esp32:
  board: nodemcu-32s
  framework:
    type: arduino

external_components:
  - source: github://pr#4216
    components: esp32

wifi:
  ssid: !secret wifi_ssid_k
  password: !secret wifi_pass
  domain: .locald
  reboot_timeout: 15min
  #output_power: 17.5dB
  fast_connect: true
  #power_save_mode: none
  manual_ip:
    static_ip: 192.168.1.99
    gateway: 192.168.1.1
    subnet: 255.255.255.0
    dns1: 192.168.1.1
    dns2: 8.8.8.8

logger:
  baud_rate: 0

api:
  reboot_timeout: 0s

ota:

web_server:
  port: 80

i2c:
  sda: GPIO32
  scl: GPIO33
  scan: True

dallas:
  - pin:
      number: GPIO26
      mode:
          input: true
          pullup: true  
    update_interval: 10s
    id: dallas_node


globals:
  - id: id_global_valve_bool
    type: bool
    restore_value: true
  
  - id: id_global_valve_active
    type: bool
    restore_value: false
    initial_value: 'false'

binary_sensor:
  - platform: status
    name: ${board_name}_Status

  - platform: template
    name: ${board_name}_Valve_Status
    id: id_valve_status
    #restore: true
    lambda: return id(id_global_valve_bool);
  
  - platform: template
    name: ${board_name}_Valve_Active
    id: id_valve_active
    #restore: true
    lambda: return id(id_global_valve_active);    

light:
  - platform: monochromatic
    name: ${board_name}_Light
    output: pwm1
    effects:
      - strobe:

output:
  - platform: ledc
    id: pwm1
    pin: GPIO04
    frequency: 1000 Hz

number:
  - platform: template
    name: ${board_name}_Humidity_Set
    id: id_humidity_set
    restore_value: true
    update_interval: 30s
    min_value: 0
    max_value: 99
    step: 1
    optimistic: true

sensor:
  - platform: uptime
    name: ${board_name}_Uptime_s
    id: uptime_sensor
    update_interval: 15s
    
  - platform: wifi_signal
    name: ${board_name}_WiFi_RSSI
    update_interval: 60s

  - platform: dallas
    address: 0xF001144BC0C4AA28
    name: ${board_name}_Cold_Pipe
    accuracy_decimals: 2
    resolution: 12
    
  - platform: dallas
    address: 0x6B3C01D607C1EF28
    name: ${board_name}_Hot_Pipe
    accuracy_decimals: 2
    resolution: 12

  - platform: sht3xd
    temperature:
      name: ${board_name}_Temperature
      filters:
        - offset: -3.5      
    humidity:
      name: ${board_name}_Humidity
      id: id_humidity_sensor
      filters:
        - offset: 7.0
      on_value:
        then:
          - if:
              condition:
                and:
                  - lambda: 'return id(id_humidity_sensor).state > id(id_humidity_set).state;'
                  - switch.is_off: relay4
                  - switch.is_off: relay3
                  - switch.is_on: id_fan_b_auto_mode
              then:
                - logger.log: "The Dehumidifier has switched on!"
                - switch.turn_on: relay3
                #- delay: 2s
              else:
                - if:
                    condition:
                      and:
                        - switch.is_on: relay3
                        - switch.is_on: id_fan_b_auto_mode
                    then:
                      - logger.log: "The Dehumidifier is under the Setpoint. Now off!"
                      - switch.turn_off: relay3
    address: 0x44
    update_interval: 5s

button:
  - platform: restart
    name: ${board_name}_Restart

  - platform: template
    name: ${board_name}_Open_Valve
    icon: mdi:valve-open
    on_press:
      - if:
          condition:
            - binary_sensor.is_off: id_valve_active
          then:  
            - switch.turn_on: relay2

  - platform: template
    name: ${board_name}_Close_Valve
    icon: mdi:valve-closed
    on_press:
      - if:
          condition:
            - binary_sensor.is_off: id_valve_active
          then:  
            - switch.turn_on: relay1

switch:
  - platform: gpio
    pin: 
      number: GPIO16
      inverted: yes
    name: ${board_name}_Relay_1
    id: relay1
    interlock: [relay2]
    restore_mode: RESTORE_DEFAULT_OFF
    icon: mdi:valve-closed
    on_turn_on:
      then:  
        - globals.set:
            id: id_global_valve_active
            value: 'true'
        - delay: 30s
        - switch.turn_off: relay1
        - globals.set:
            id: id_global_valve_bool
            value: 'false'
        - globals.set:
            id: id_global_valve_active
            value: 'false'

  - platform: gpio
    pin: 
      number: GPIO17
      inverted: yes
    name: ${board_name}_Relay_2
    id: relay2
    interlock: [relay1]
    restore_mode: RESTORE_DEFAULT_OFF
    icon: mdi:valve-open
    on_turn_on:
      then:
        - globals.set:
            id: id_global_valve_active
            value: 'true'        
        - delay: 30s
        - switch.turn_off: relay2    
        - globals.set:
            id: id_global_valve_bool
            value: 'true'
        - globals.set:
            id: id_global_valve_active
            value: 'false'

  - platform: gpio
    pin: 
      number: GPIO18
      inverted: yes
    name: ${board_name}_Relay_3
    id: relay3
    restore_mode: RESTORE_DEFAULT_OFF
    icon: mdi:fan
    
  - platform: gpio
    pin: 
      number: GPIO19
      inverted: yes
    name: ${board_name}_Relay_4
    id: relay4
    restore_mode: RESTORE_DEFAULT_OFF
    icon: mdi:fan
  
  - platform: gpio
    pin: 
      number: GPIO21
      inverted: yes
    name: ${board_name}_Relay_5
    id: relay5
    restore_mode: RESTORE_DEFAULT_ON
    icon: mdi:power-cycle

  - platform: gpio
    pin: 
      number: GPIO22
      inverted: yes
    name: ${board_name}_Relay_6
    id: relay6
    restore_mode: RESTORE_DEFAULT_ON

  - platform: template
    name: ${board_name}_Fan_B_Auto_Mode
    id: id_fan_b_auto_mode
    optimistic: true
    restore_state: true

  - platform: template
    name: ${board_name}_Fan_B_Force_Mode
    id: id_fan_b_force_mode
    optimistic: true
    restore_state: true

text_sensor:
  - platform: template
    name: ${board_name}_Uptime
    lambda: |-
        int seconds = round(id(uptime_sensor).raw_state);
        int days = seconds / (24 * 3600);
        seconds = seconds % (24 * 3600);
        int hours = seconds / 3600;
        seconds = seconds % 3600;
        int minutes = seconds /  60;
        seconds = seconds % 60;
        return (
          (days ? to_string(days) + "d " : "00d ") +
          (hours ? to_string(hours) + "h " : "00h ") +
          (minutes ? to_string(minutes) + "m " : "00m ") +
          (to_string(seconds) + "s")
        );
    icon: mdi:clock-start
    update_interval: 15s

  - platform: wifi_info
    ip_address:
      name: ${board_name}_IP
    ssid:
      name: ${board_name}_SSID
    bssid:
      name: ${board_name}_BSSID
    mac_address:
      name: ${board_name}_Mac
    scan_results:
      name: ${board_name}_Latest_Scan_Results

  - platform: version
    name: ${board_name}_ESPHome_Version
    hide_timestamp: true
    
time:
  - platform: sntp
    id: sntp_time
    timezone: Europe/Moscow
    on_time:
      - seconds: 30
        then:
          - if:
              condition:
                - for:
                    time: 60min
                    condition:
                      switch.is_on: relay4
              then:
                - switch.turn_off: relay4 
          - if:
              condition:
                - for:
                    time: 60min
                    condition:
                      switch.is_on: relay3
              then:
                - switch.turn_off: relay3 