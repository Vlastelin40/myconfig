substitutions:
  board_name: sonoff_pow_r2_2
  ip_address: 192.168.1.132

esphome:
  name: ${board_name}
  platform: ESP8266
  board: esp01_1m
  comment: Wall Heater T

wifi:
  ssid: !secret wifi_ssid_k
  password: !secret wifi_pass
  domain: .local
  reboot_timeout: 15min
  #output_power: 17.5dB
  fast_connect: true
  #power_save_mode: none
  manual_ip:
    static_ip: 192.168.1.132
    gateway: 192.168.1.1
    subnet: 255.255.255.0
    dns1: 192.168.1.1
    dns2: 8.8.8.8    

# Enable logging
logger:
  baud_rate: 0

uart:
  rx_pin: RX
  baud_rate: 4800

api:
  reboot_timeout: 0s

ota:

web_server:
  port: 80

i2c:
  sda: GPIO04
  scl: GPIO05
  scan: True

# status_led:
#   pin:
#     number: GPIO13
#     #inverted: yes

output:
  - platform: gpio
    id: blue_led
    pin: GPIO13
    inverted: True

light:
  - platform: binary
    name: ${board_name}_StatusLED
    internal: true
    output: blue_led
    id: main_led

climate:
  - platform: bang_bang
    visual:
      min_temperature: 20 °C
      max_temperature: 27 °C
      temperature_step: 1 °C  
    name: ${board_name}_Wall_Heater
    sensor: bme_temperature
    default_target_temperature_low: 21 °C
    default_target_temperature_high: 23 °C
    heat_action:
      - switch.turn_on: relay
    idle_action:
      - switch.turn_off: relay
    id: my_climate

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO0
      mode: INPUT_PULLUP
      inverted: True
    name: ${board_name}_Button
    on_press:
      - switch.toggle: relay
      
  - platform: status
    name: ${board_name}_Status

  - platform: template
    name: ${board_name}_Alarm
    id: template_bin_alarm
    filters:
      - delayed_off: 5s
    device_class: problem

switch:
  - platform: gpio
    name: ${board_name}_Relay
    pin: GPIO12
    restore_mode: RESTORE_DEFAULT_ON
    id: relay
    icon: mdi:radiator

sensor:
  - platform: cse7766
    update_interval: 5s
    current:
      name: ${board_name}_Current
      accuracy_decimals: 1
      device_class: current
      id: id_current
    voltage:
      name: ${board_name}_Voltage
      accuracy_decimals: 1
      device_class: voltage
      id: id_voltage
    power:
      name: ${board_name}_Power
      accuracy_decimals: 0
      id: id_power
      unit_of_measurement: W
      device_class: power

  - platform: integration
    name: ${board_name}_Energy
    sensor: id_power
    time_unit: h
    accuracy_decimals: 3
    unit_of_measurement: 'kWh'
    device_class: energy
    state_class: total_increasing
    filters:
      - multiply: 0.001
    id: id_energy
    restore: true

  - platform: bme280
    temperature:
      name: ${board_name}_Temperature
      oversampling: 16x
      id: bme_temperature
      on_value:
        then:
          - if:
              condition:
                lambda: 'return ((id(bme_temperature).state - id(my_climate).target_temperature_high) >= 1 );'
              then:
                - logger.log: " >>> The bme above target high"
                - text_sensor.template.publish:
                    id: template_text_log
                    state: "The bme above target high"                
                - if:
                    condition:
                      switch.is_on: relay
                    then:
                      - binary_sensor.template.publish:
                          id: template_bin_alarm
                          state: ON                  
                      - logger.log: " >>> Switching off relay"
                      - text_sensor.template.publish:
                          id: template_text_log
                          state: "Switching off relay"    
                      - switch.turn_off: relay
              else:
                - logger.log: " >>> The bme below target high"
                - text_sensor.template.publish:
                    id: template_text_log
                    state: "The bme below target high"
                - binary_sensor.template.publish:
                    id: template_bin_alarm
                    state: OFF                
    pressure:
      name: ${board_name}_Pressure
      id: bme_pressure
    humidity:
      name: ${board_name}_Humidity
      id: bme_humidity
    address: 0x77
    update_interval: 15s



    
    
  - platform: uptime
    name: ${board_name}_Uptime_s
    id: uptime_sensor

  - platform: wifi_signal
    name: ${board_name}_WiFi_RSSI
    update_interval: 60s

text_sensor:
  - platform: template
    name: ${board_name}_Uptime
    lambda: |-
      uint32_t dur = id(uptime_sensor).state;
      int dys = 0;
      int hrs = 0;
      int mnts = 0;
      if (dur > 86399) {
        dys = trunc(dur / 86400);
        dur = dur - (dys * 86400);
      }
      if (dur > 3599) {
        hrs = trunc(dur / 3600);
        dur = dur - (hrs * 3600);
      }
      if (dur > 59) {
        mnts = trunc(dur / 60);
        dur = dur - (mnts * 60);
      }
      char buffer[17];
      sprintf(buffer, "%ud %02uh %02um %02us", dys, hrs, mnts, dur);
      return {buffer};
    icon: mdi:clock-start
    update_interval: 15s

  - platform: template
    name: ${board_name}_Log
    id: template_text_log

button:
  - platform: restart
    name: ${board_name}_Restart
    
time:
  - platform: sntp
    id: sntp_time
    timezone: Europe/Moscow