substitutions:
  board_name: esp01_led_indicator_k


esphome:
  name: ${board_name}
  platform: ESP8266
  board: esp01_1m

wifi:
  ssid: !secret wifi_ssid_k
  password: !secret wifi_pass
  domain: .localdomain
  reboot_timeout: 15min
  output_power: 17.5dB
  fast_connect: true
  power_save_mode: none
  # manual_ip:
  #   static_ip: ${ip_address}
  #   gateway: 192.168.1.1
  #   subnet: 255.255.255.0

logger:
  baud_rate: 0

api:
  reboot_timeout: 0s

ota:

web_server:
  port: 80

light:
  - platform: fastled_clockless
    chipset: WS2812B
    pin: GPIO03
    num_leds: 12
    rgb_order: GRB
    name: ${board_name}_LED
    id: light1
    effects:
      - addressable_rainbow:
      - addressable_color_wipe:
      - addressable_scan:
      - addressable_twinkle:
      - addressable_random_twinkle:
      - addressable_fireworks:
      - addressable_flicker:
      - automation:
          name: "Red_Alarm"
          sequence:
            - light.turn_on:
                id: light1
                brightness: 100%
                transition_length: 2s
                red: 100%
                green: 0%
                blue: 0%
            - delay: 1s
            - light.turn_on:
                id: light1
                brightness: 10%
                transition_length: 1s
                red: 100%
                green: 0%
                blue: 0%
            - delay: 1s

binary_sensor:
  - platform: status
    name: ${board_name}_Status
    
switch:
  - platform: restart
    name: ${board_name}_Restart

sensor:
  - platform: uptime
    name: ${board_name}_Uptime_s
    icon: mdi:clock-outline
    id: uptime_sensor

  - platform: wifi_signal
    name: ${board_name}_WiFi_RSSI
    update_interval: 60s

text_sensor:
  - platform: template
    name: ${board_name}_Uptime
    lambda: |-
      uint32_t dur = id(uptime_sensor).state;
      int dys = 0;
      int hrs = 0;
      int mnts = 0;
      if (dur > 86399) {
        dys = trunc(dur / 86400);
        dur = dur - (dys * 86400);
      }
      if (dur > 3599) {
        hrs = trunc(dur / 3600);
        dur = dur - (hrs * 3600);
      }
      if (dur > 59) {
        mnts = trunc(dur / 60);
        dur = dur - (mnts * 60);
      }
      char buffer[17];
      sprintf(buffer, "%ud %02uh %02um %02us", dys, hrs, mnts, dur);
      return {buffer};
    icon: mdi:clock-start
    update_interval: 15s

time:
  - platform: homeassistant
    id: homeassistant_time
  - platform: sntp
    id: sntp_time
    timezone: UTC-3
