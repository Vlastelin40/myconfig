substitutions:
  board_name: d1mini_air_freshener
  
esphome:
  name: ${board_name}
  platform: ESP8266
  board: d1_mini

wifi:
  ssid: !secret wifi_ssid_k
  password: !secret wifi_pass
  domain: .localdomain
  reboot_timeout: 15min
  output_power: 17.5dB
  fast_connect: true
  power_save_mode: none
  manual_ip:
    static_ip: 192.168.1.98
    gateway: 192.168.1.1
    subnet: 255.255.255.0
    dns1: 192.168.1.1
    dns2: 8.8.8.8

logger:
  baud_rate: 0
  
api:
  reboot_timeout: 10min

ota:

web_server:
  port: 80

binary_sensor:
  - platform: status
    name: ${board_name}_Status

  - platform: gpio
    pin:
      number: GPIO13
      #mode: INPUT_PULLDOWN_16
      mode: INPUT_PULLUP
      inverted: true
    name: ${board_name}_Button
    id: button
    filters:
      - delayed_on: 10ms
      - delayed_off: 10ms    
    on_press:
      then:
        - switch.turn_on: spray
    
  - platform: gpio
    pin:
      number: GPIO12
      #mode: INPUT_PULLDOWN_16
      mode: INPUT_PULLUP
      inverted: true
    name: ${board_name}_Canister
    id: can_presence
    filters:
      - delayed_on: 10ms
      - delayed_off: 10ms

number:
  - platform: template
    name: ${board_name}_Counter
    icon: mdi:counter
    id: id_counter
    restore_value: true
    update_interval: 30s
    min_value: 0
    max_value: 1000
    step: 1
    optimistic: true

text_sensor:
  - platform: template
    name: ${board_name}_Uptime
    lambda: |-
      uint32_t dur = id(uptime_sensor).state;
      int dys = 0;
      int hrs = 0;
      int mnts = 0;
      if (dur > 86399) {
        dys = trunc(dur / 86400);
        dur = dur - (dys * 86400);
      }
      if (dur > 3599) {
        hrs = trunc(dur / 3600);
        dur = dur - (hrs * 3600);
      }
      if (dur > 59) {
        mnts = trunc(dur / 60);
        dur = dur - (mnts * 60);
      }
      char buffer[17];
      sprintf(buffer, "%ud %02uh %02um %02us", dys, hrs, mnts, dur);
      return {buffer};
    icon: mdi:clock-start
    update_interval: 15s

sensor:
  - platform: uptime
    name: ${board_name}_Uptime_s
    id: uptime_sensor
    update_interval: 15s

  - platform: wifi_signal
    name: ${board_name}_WiFi_RSSI
    update_interval: 60s

  - platform: adc
    pin: A0
    name: ${board_name}_ADC
    id: adc_value
    filters:
      - multiply: 3.3
    update_interval: 15s

  # - platform: template
  #   name: ${board_name}_AirQ
  #   lambda: return ((id(adc_value).state)*(-30.303)+100);
  #   unit_of_measurement: "%"
  #   update_interval: 15s
  #   icon: mdi:air-filter

  - platform: template
    name: ${board_name}_AirQ
    icon: mdi:gas-cylinder
    unit_of_measurement: '%'
    accuracy_decimals: 1
    lambda: |-
      float raw_value = id(adc_value).state;
      return raw_value;    
    filters:    
      - calibrate_linear:
          - 0.3 -> 100.0
          - 3.3 -> 0.0        
    update_interval: 15s
  
switch:
  - platform: restart
    name: ${board_name}_Restart

  - platform: gpio
    pin:
      number: GPIO15
      #mode: INPUT_PULLDOWN_16
    name: ${board_name}_Spray
    id: spray
    icon: mdi:sprinkler
    restore_mode: ALWAYS_OFF
    on_turn_on:
      then:  
        - delay: 50ms
        - switch.turn_off: spray
        - number.set:
            id: id_counter
            value: !lambda |-
              return ((id(id_counter).state)+1);
        - component.update: id_counter              

light:
  - platform: binary #monochromatic
    name: ${board_name}_LED_Green
    output: output_led1

  - platform: binary #monochromatic
    name: ${board_name}_LED_Red
    output: output_led2

output:
  - platform: esp8266_pwm
    id: output_led1
    pin: 
      number: GPIO00
      inverted: true

  - platform: esp8266_pwm
    id: output_led2
    pin: 
      number: GPIO02
      inverted: true

time:
  - platform: homeassistant
    id: homeassistant_time 
  - platform: sntp
    id: sntp_time
    timezone: Europe/Moscow