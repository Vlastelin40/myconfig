substitutions:
  board_name: d1mini_distance_sensor
  
esphome:
  name: ${board_name}

esp8266:
  board: d1_mini
  restore_from_flash: true

wifi:
  ssid: !secret wifi_ssid_k
  password: !secret wifi_pass
  domain: .local
  reboot_timeout: 15min
  #output_power: 17.5dB
  fast_connect: true
  #power_save_mode: none
  manual_ip:
    static_ip: 192.168.1.113
    gateway: 192.168.1.1
    subnet: 255.255.255.0
    dns1: 192.168.1.1
    dns2: 8.8.8.8

logger:
  baud_rate: 0
  
api:
  reboot_timeout: 0s

ota:

web_server:
  port: 80

i2c:
  sda: GPIO04
  scl: GPIO05
  scan: True

binary_sensor:
  - platform: status
    name: ${board_name}_Status

  - platform: template
    name: ${board_name}_Occupancy
    device_class: occupancy
    icon: mdi:account-eye
    id: occupancy_binary
    # filters:
    #   - delayed_on_off: 10s
    lambda: |-
      if (id(id_distance).state > 0.1) {
        return true;
      } else {
        return false;
      }

text_sensor:
  - platform: template
    name: ${board_name}_Uptime
    lambda: |-
      uint32_t dur = id(uptime_sensor).state;
      int dys = 0;
      int hrs = 0;
      int mnts = 0;
      if (dur > 86399) {
        dys = trunc(dur / 86400);
        dur = dur - (dys * 86400);
      }
      if (dur > 3599) {
        hrs = trunc(dur / 3600);
        dur = dur - (hrs * 3600);
      }
      if (dur > 59) {
        mnts = trunc(dur / 60);
        dur = dur - (mnts * 60);
      }
      char buffer[17];
      sprintf(buffer, "%ud %02uh %02um %02us", dys, hrs, mnts, dur);
      return {buffer};
    icon: mdi:clock-start
    update_interval: 15s

  - platform: wifi_info
    ip_address:
      name: ${board_name}_IP
    ssid:
      name: ${board_name}_SSID
    bssid:
      name: ${board_name}_BSSID
    mac_address:
      name: ${board_name}_Mac
    scan_results:
      name: ${board_name}_Latest_Scan_Results

  - platform: version
    name: ${board_name}_ESPHome_Version
    hide_timestamp: true

  - platform: template
    name: ${board_name}_Occupancy_Text
    icon: mdi:account-search
    id: occupancy_text
    lambda: |-
      if ( id(id_distance).state > 0.1  && id(id_distance).state <= 0.7 ) {
        return {"Sitting"};
      } 
      if ( id(id_distance).state > 0.7  && id(id_distance).state <= 1.5 ) {
      return {"Standing"}; 
      } 
      else 
      {
      return {"NA"};
      }

sensor:
  - platform: uptime
    name: ${board_name}_Uptime_s
    id: uptime_sensor
    update_interval: 15s

  - platform: wifi_signal
    name: ${board_name}_WiFi_RSSI
    update_interval: 60s

  - platform: vl53l0x
    name: ${board_name}_Distance
    address: 0x29
    update_interval: 5s
    long_range: true
    id: id_distance
    on_value:
      then:
        - component.update: occupancy_text
button:
  - platform: restart
    name: ${board_name}_Restart

time:
  - platform: sntp
    id: sntp_time
    timezone: Europe/Moscow