substitutions:
  board_name: sp111_socket_2
  # # Higher value gives lower watt readout
  # current_res: '0.00280'
  # # Lower value gives lower voltage readout
  # voltage_div: '81000'

  
esphome:
  name: ${board_name}
  platform: ESP8266
  board: esp8285
  comment: Gosund SP111 socket 2
  on_boot:
    priority: -10
    then:
    # on affter boot
    - switch.toggle: switch1
    
wifi:
  ssid: !secret wifi_ssid_k
  password: !secret wifi_pass
  domain: .localdomain
  reboot_timeout: 15min
  output_power: 17.5dB
  fast_connect: true
  power_save_mode: none
  manual_ip:
    static_ip: 192.168.1.137
    gateway: 192.168.1.1
    subnet: 255.255.255.0
    dns1: 192.168.1.1
    dns2: 8.8.8.8

logger:

api:
  reboot_timeout: 10min

ota:

web_server:
  port: 80

binary_sensor:
  - platform: status
    name: ${board_name}_Status
    
  - platform: gpio
    pin:
      number: GPIO13
      inverted: True
    name: "${board_name}_button"
    on_press:
      - switch.toggle: switch1

output:
  - platform: gpio
    pin: GPIO15
    id: relay
  - platform: gpio
    pin: GPIO00
    inverted: True
    id: led1

status_led:
  pin:
    number: GPIO02
    inverted: True

switch:
  - platform: template
    id: switch1
    icon: mdi:power-socket-eu
    optimistic: true
    name: "${board_name}_Relay"
    turn_on_action:
      - output.turn_on: relay
      - output.turn_on: led1
    turn_off_action:
      - output.turn_off: relay
      - output.turn_off: led1

  - platform: restart
    name: ${board_name}_Restart

sensor:
  # - platform: hlw8012
  #   sel_pin:
  #     number: GPIO12
  #     inverted: True
  #   cf_pin: GPIO05
  #   cf1_pin: GPIO04
  #   current_resistor: ${current_res}
  #   voltage_divider: ${voltage_div}
  #   current:
  #     name: "${board_name}_A"
  #     unit_of_measurement: A
  #     accuracy_decimals: 3
  #     icon: mdi:flash-circle
  #   voltage:
  #     name: "${board_name}_V"
  #     unit_of_measurement: V
  #     icon: mdi:flash-circle
  #   power:
  #     name: "${board_name}_W"
  #     unit_of_measurement: W
  #     id: "${board_name}_W"
  #     icon: mdi:flash-circle
  #   change_mode_every: 4
  #   update_interval: 10s
  # - platform: total_daily_energy
  #   name: "${board_name}_Total Daily Energy"
  #   power_id: "${board_name}_W"
  #   filters:
  #       # Multiplication factor from W to kW is 0.001
  #       - multiply: 0.001
  #   unit_of_measurement: kWh
  #   icon: mdi:clock-alert
      
  - platform: uptime
    name: ${board_name}_Uptime_s
    icon: mdi:clock-outline
    id: uptime_sensor

  - platform: wifi_signal
    name: ${board_name}_WiFi_RSSI
    update_interval: 60s

text_sensor:
  - platform: template
    name: ${board_name}_Uptime
    lambda: |-
      uint32_t dur = id(uptime_sensor).state;
      int dys = 0;
      int hrs = 0;
      int mnts = 0;
      if (dur > 86399) {
        dys = trunc(dur / 86400);
        dur = dur - (dys * 86400);
      }
      if (dur > 3599) {
        hrs = trunc(dur / 3600);
        dur = dur - (hrs * 3600);
      }
      if (dur > 59) {
        mnts = trunc(dur / 60);
        dur = dur - (mnts * 60);
      }
      char buffer[17];
      sprintf(buffer, "%ud %02uh %02um %02us", dys, hrs, mnts, dur);
      return {buffer};
    icon: mdi:clock-start
    update_interval: 15s

    
time:
  - platform: homeassistant
    id: homeassistant_time
