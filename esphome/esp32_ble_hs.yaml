substitutions:
  board_name: esp32_ble_hs
  node_name: esp32-ble-hs
  up_int: 60s
  
esphome:
  name: ${node_name}
  comment: ESP32 BLE Tracker HS
  # platformio_options:
  #   board_build.partitions: ../../../custom_components/partitions_esp32_4mb.csv

esp32:
  board: nodemcu-32s

external_components:
  - source: github://myhomeiot/esphome-components  

wifi:
  ssid: !secret wifi_ssid_k
  password: !secret wifi_pass
  domain: .local
  reboot_timeout: 15min
  #output_power: 17.5dB
  fast_connect: true
  #power_save_mode: none
  manual_ip:
    static_ip: 192.168.1.59
    gateway: 192.168.1.1
    subnet: 255.255.255.0
    dns1: 192.168.1.1
    dns2: 8.8.8.8

logger:
  baud_rate: 0

api:
  reboot_timeout: 0s

ota:

# mdns:
#   disabled: true
  
globals:
  - id: event_count
    type: unsigned int
    restore_value: no
    initial_value: '0'

#bluetooth_proxy:

esp32_ble_tracker:
  scan_parameters:
    #interval: 512ms
    #window: 48ms
    active: false

# dashboard_import:
#   package_import_url: github://esphome/bluetooth-proxies/esp32-generic.yaml@main

web_server:
  port: 80

ble_gateway:
  id: ${board_name}
  on_ble_advertise:
    then:
      - homeassistant.event:
          event: esphome.on_ble_advertise
          data:
            packet: !lambda return packet;
            gateway_id: ${board_name}
      - lambda: |-
          id(event_count) += 1;


# myhomeiot_ble_host:

# myhomeiot_ble_client:
#   - mac_address: 7E:FE:3E:EC:59:FB
#     service_uuid: '180F'
#     characteristic_uuid: '2A19'
#     update_interval: 24h
#     on_value:
#       then:
#         lambda: |-
#           id(${board_name}_White_Battery).publish_state(x[0]);


#   - mac_address: 2A:BC:3E:DC:57:65
#     service_uuid: '180F'
#     characteristic_uuid: '2A19'
#     update_interval: 24h
#     on_value:
#       then:
#         lambda: |-
#           id(${board_name}_Pink_Battery).publish_state(x[0]);

#   - mac_address: 6B:9C:3E:D1:C5:9A
#     service_uuid: '180F'
#     characteristic_uuid: '2A19'
#     update_interval: 24h
#     on_value:
#       then:
#         lambda: |-
#           id(${board_name}_Green_Battery).publish_state(x[0]);


#   - mac_address: 2A:BC:3E:DC:57:65
#     service_uuid: '180F'
#     characteristic_uuid: '2A19'
#     update_interval: 24h
#     on_value:
#       then:
#         lambda: |-
#           id(${board_name}_Grey_Battery).publish_state(x[0]);

binary_sensor:
  - platform: status
    name: ${board_name}_Status

  - platform: ble_presence
    mac_address: 7E:FE:3E:EC:59:FB
    name: ${board_name}_White
    device_class: presence

  - platform: ble_presence
    mac_address: 3B:EF:3E:DE:98:6B
    name: ${board_name}_Grey
    device_class: presence

  - platform: ble_presence
    mac_address: 2A:BC:3E:DC:57:65
    name: ${board_name}_Pink
    device_class: presence

  - platform: ble_presence
    mac_address: 6B:9C:3E:D1:C5:9A
    name: ${board_name}_Green
    device_class: presence

# 7E:FE:3E:EC:59:FB white
# 6B:9C:3E:D1:C5:9A green
# 2A:BC:3E:DC:57:65 PINK
# 3B:EF:3E:DE:98:6B GREY

sensor:
  - platform: uptime
    name: ${board_name}_Uptime_s
    id: uptime_sensor
    update_interval: 15s

  # - platform: wifi_signal
  #   name: ${board_name}_WiFi_RSSI
  #   update_interval: 60s
    
  # - platform: ble_rssi
  #   mac_address: 7E:FE:3E:EC:59:FB
  #   name: ${board_name}_White_RSSI
  #   icon: "mdi:wifi"

  # - platform: ble_rssi
  #   mac_address: 3B:EF:3E:DE:98:6B
  #   name: ${board_name}_Grey_RSSI
  #   icon: "mdi:wifi"

  # - platform: ble_rssi
  #   mac_address: 2A:BC:3E:DC:57:65
  #   name: ${board_name}_Pink_RSSI
  #   icon: "mdi:wifi"

  # - platform: ble_rssi
  #   mac_address: 6B:9C:3E:D1:C5:9A
  #   name: ${board_name}_Green_RSSI
  #   icon: "mdi:wifi"

  # - platform: template
  #   id: ${board_name}_White_Battery
  #   name: ${board_name}_White_Battery
  #   device_class: battery
  #   unit_of_measurement: '%'
  #   state_class: measurement
  #   accuracy_decimals: 0

  # - platform: template
  #   id: ${board_name}_Pink_Battery
  #   name: ${board_name}_Pink_Battery
  #   device_class: battery
  #   unit_of_measurement: '%'
  #   state_class: measurement
  #   accuracy_decimals: 0

  # - platform: template
  #   id: ${board_name}_Green_Battery
  #   name: ${board_name}_Green_Battery
  #   device_class: battery
  #   unit_of_measurement: '%'
  #   state_class: measurement
  #   accuracy_decimals: 0
    
  # - platform: template
  #   id: ${board_name}_Grey_Battery
  #   name: ${board_name}_Grey_Battery
  #   device_class: battery
  #   unit_of_measurement: '%'
  #   state_class: measurement
  #   accuracy_decimals: 0

  # - platform: template
  #   name: ${board_name}_Heap_Free
  #   lambda: "return ESP.getFreeHeap();"
  #   id: heap_size
  #   update_interval: 5s
  #   unit_of_measurement: bytes
  #   accuracy_decimals: 0
  #   entity_category: diagnostic
    
  # - platform: template
  #   name: ${board_name}_Heap_Min
  #   icon: mdi:memory
  #   lambda: |-
  #     return {static_cast<float>(esp_get_minimum_free_heap_size())};
  #   unit_of_measurement: B
  #   #update_interval: ${update_interval}
  #   update_interval: 5s
  #   entity_category: diagnostic

  - platform: template
    name: ${board_name}_Events
    lambda: |-
      return id(event_count);
    update_interval: ${up_int}
    icon: mdi:cube-send
    unit_of_measurement: 'event'
    accuracy_decimals: 0

text_sensor:
  - platform: template
    name: ${board_name}_Uptime
    lambda: |-
        int seconds = round(id(uptime_sensor).raw_state);
        int days = seconds / (24 * 3600);
        seconds = seconds % (24 * 3600);
        int hours = seconds / 3600;
        seconds = seconds % 3600;
        int minutes = seconds /  60;
        seconds = seconds % 60;
        return (
          (days ? to_string(days) + "d " : "00d ") +
          (hours ? to_string(hours) + "h " : "00h ") +
          (minutes ? to_string(minutes) + "m " : "00m ") +
          (to_string(seconds) + "s")
        );
    icon: mdi:clock-start
    update_interval: 15s

  #BLE Devices
  - platform: homeassistant
    id: ble_gateway_devices
    entity_id: binary_sensor.ble_gateway
    attribute: devices
    on_value:
      then:
        - lambda: id(${board_name}).set_devices(x);

  - platform: wifi_info
    ip_address:
      name: ${board_name}_IP
    ssid:
      name: ${board_name}_SSID
    bssid:
      name: ${board_name}_BSSID
    mac_address:
      name: ${board_name}_Mac
    scan_results:
      name: ${board_name}_Latest_Scan_Results

  - platform: version
    name: ${board_name}_ESPHome_Version
    hide_timestamp: true

button:
  - platform: restart
    name: ${board_name}_Restart

time:
  - platform: sntp
    id: sntp_time
    timezone: Europe/Moscow

interval:
  - interval: ${up_int}
    then:
      - lambda: |-
          static bool flag = false;
          auto min = id(sntp_time).now().minute;
          if (min == 59 && !flag)
          {
            id(event_count) = 0;
            flag = true;
          }
          else
          {
            flag = false;
          }        