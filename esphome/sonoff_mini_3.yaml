substitutions:
  board_name: sonoff_mini_3

esphome:
  name: ${board_name}
  platform: ESP8266
  comment: Sonoff Mini 3
  board: esp01_1m
  on_boot:
    if:
      condition:
        wifi.connected:
      then:
        - light.turn_on: wifi_led


wifi:
  ssid: !secret wifi_ssid_k
  password: !secret wifi_pass
  domain: .local
  reboot_timeout: 15min
  #output_power: 17.5dB
  fast_connect: true
  #power_save_mode: none
  manual_ip:
    static_ip: 192.168.1.54
    gateway: 192.168.1.1
    subnet: 255.255.255.0
    dns1: 192.168.1.1
    dns2: 8.8.8.8

logger:
  baud_rate: 0

api:
  reboot_timeout: 0s

ota:

web_server:
  port: 80

i2c:
  id: i2c_component
  sda: GPIO3
  scl: GPIO1
  scan: True

output:
  - platform: gpio
    id: manual_status_led
    pin: 
      number: GPIO13
      inverted: false

light:
  - platform: binary
    name: ${board_name}_Status_LED
    internal: true
    output: manual_status_led
    id: wifi_led
  
binary_sensor:
  - platform: gpio
    pin: GPIO00
    id: reset
    internal: true
    filters:
      - invert:
      - delayed_off: 10ms
    on_press:
      - switch.toggle: 
          id: relay

  - platform: gpio
    name: ${board_name}_sw
    pin: GPIO04
    id: switch_1
    on_press:
      then:
        - switch.toggle:
            id: relay
    on_release:
      then:
        - switch.toggle:
            id: relay

  - platform: status
    name: ${board_name}_Status

switch:
  - platform: gpio
    name: ${board_name}_Relay
    pin: GPIO12
    id: relay
    
sensor:
  - platform: uptime
    name: ${board_name}_Uptime_s
    id: uptime_sensor

  - platform: wifi_signal
    name: ${board_name}_WiFi_RSSI
    update_interval: 60s

  - platform: bme280
    temperature:
      name: ${board_name}_Temperature
      oversampling: 16x
      id: bme_temperature
    pressure:
      name: ${board_name}_Pressure
      id: bme_pressure
    humidity:
      name: ${board_name}_Humidity
      id: bme_humidity
    address: 0x76
    update_interval: 15s

climate:
  - platform: bang_bang
    visual:
      min_temperature: 20 °C
      max_temperature: 27 °C
      temperature_step: 1 °C  
    name: ${board_name}_Wall_Heater
    sensor: bme_temperature
    default_target_temperature_low: 21 °C
    default_target_temperature_high: 23 °C
    heat_action:
      - switch.turn_on: relay
    idle_action:
      - switch.turn_off: relay

text_sensor:
  - platform: template
    name: ${board_name}_Uptime
    lambda: |-
      uint32_t dur = id(uptime_sensor).state;
      int dys = 0;
      int hrs = 0;
      int mnts = 0;
      if (dur > 86399) {
        dys = trunc(dur / 86400);
        dur = dur - (dys * 86400);
      }
      if (dur > 3599) {
        hrs = trunc(dur / 3600);
        dur = dur - (hrs * 3600);
      }
      if (dur > 59) {
        mnts = trunc(dur / 60);
        dur = dur - (mnts * 60);
      }
      char buffer[17];
      sprintf(buffer, "%ud %02uh %02um %02us", dys, hrs, mnts, dur);
      return {buffer};
    icon: mdi:clock-start
    update_interval: 15s

button:
  - platform: restart
    name: ${board_name}_Restart

time:
  - platform: sntp
    id: sntp_time
    timezone: Europe/Moscow