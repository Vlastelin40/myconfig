
  bed_led_toggle_v:
    alias: Bed LED Toggle V
    sequence:
      - service: input_boolean.toggle
        entity_id: input_boolean.bed_led_enable

  ha_released_update:
    alias: HA Released version update from server
    sequence:
      service: homeassistant.update_entity
      entity_id: 
        - sensor.ha_supervisor_current_version
        - sensor.ha_supervisor_latest_version
        - sensor.ha_supervisor_latest_beta
        - sensor.ha_installed_version
        - sensor.ha_latest_version
        - sensor.ha_latest_beta

  speedtest_manual:
    alias: Speedtest
    sequence:
      - service: speedtestdotnet.speedtest

  purge_db:
    alias: Purge Main DB
    sequence:
      - service: recorder.purge
        data:
          keep_days: 1
          repack: true

  noop:
    alias: Dummy
    mode: queued
    max: 10
    max_exceeded: silent
    sequence:
      - delay:
          seconds: 0.1 
      
  water_off:
    alias: Turn Water Off
    sequence:
      - service: switch.turn_on
        entity_id: switch.esp32_node_b_relay_1
      - delay: '00:00:25'
      - service: switch.turn_off
        entity_id: switch.esp32_node_b_relay_1

  water_on:
    alias: Turn Water On
    sequence:
      - service: switch.turn_on
        entity_id: switch.esp32_node_b_relay_2
      - delay: '00:00:25'
      - service: switch.turn_off
        entity_id: switch.esp32_node_b_relay_2

  battery_level_check:
    alias: Battery Level Check
    sequence:
      - service: script.turn_on
        data:
          entity_id: >
            {% set num_low_bat = expand('group.batteries') | selectattr('state','<=','50') | map(attribute='attributes.name') | list | count %}
            {% if num_low_bat >0 %}
              script.battery_level_low
            {% else %}
              script.battery_level_ok
            {% endif%}

  battery_level_low:
    alias: Battery Level Low
    sequence:
      - service: notify.telegram
        data:
          message: >
            {% set low_bat = expand('group.batteries') | selectattr('state','<=',states('input_number.battery_low_level')) | map(attribute='attributes.name') | list | join(', ') %}
          
            {% set num_low_bat = expand('group.batteries') | selectattr('state','<=',states('input_number.battery_low_level')) | map(attribute='attributes.name') | list | count %}
            {{"\U0001f6a8"}} Низкий заряд батарей ({{ num_low_bat}}шт): {{low_bat}}


  
  battery_level_ok:
    alias: Battery Level Ok
    sequence:
      - service: notify.telegram
        data:
          message: "\U0001f50b Батарей с уровнем заряда ниже {{states('input_number.battery_low_level')|int(0)}}% не найдено!"


  tts_test:
    alias: Test TTS
    sequence:
      # - service: media_player.volume_set
      #   data:
      #     entity_id: media_player.{{states('input_select.main_audio_out')|lower}}
      #     volume_level: '{{states("input_number.main_volume")|float(0)}}'
      # - service: tts.yandextts_say
      #   data:
      #     entity_id: media_player.{{states('input_select.main_audio_out')|lower}}
      #     message: "Проверка звука!"
    - service: media_player.volume_set
      data:
        entity_id: media_player.{{states('input_select.main_audio_out')|lower}}
        volume_level: '{{states("input_number.main_volume")|float(0)}}'
    - service: media_player.play_media
      data:
        media_content_type: dialog
        entity_id: media_player.{{states('input_select.main_audio_out')|lower}}
        media_content_id: "Проверка звука!"

  text_to_tts:
    alias: Text To TTS
    sequence:
      - service: media_player.play_media
        data:
          media_content_type: dialog
          entity_id: media_player.{{states('input_select.tts_audio_out')|lower}}
          media_content_id: "{{ states('input_text.text_to_tts') }}"
          extra:
            volume_level: '{{states("input_number.tts_volume")|float(0)}}'

  # circadian_lighting_toggle:
  #   alias: Circadian Lightning Toggle All
  #   sequence:
  #     - service: switch.toggle
  #       entity_id: switch.circadian_lighting_all
  #     - service: "switch.turn_{%if is_state('switch.circadian_lighting_all','on')%}on{%else%}off{%endif%}"
  #       entity_id:
  #         - switch.circadian_lighting_k
  #         - switch.circadian_lighting_s
  #         - switch.circadian_lighting_v
  #         - switch.circadian_lighting_mb

  unknown_state:
    alias: Unknown State
    sequence:
      - service: notify.telegram
        data:
          message: >
            {% set unk_list = states | selectattr ('state', 'in', ['unknown','unavailable']) | map(attribute='entity_id') | list | join(', ') %}
            {% set unk_count = states | selectattr ('state', 'in', ['unknown','unavailable']) | list | length  %}
            
            {% if unk_count >0 %}{{"\U0001f4f6"}} Не определено {{unk_count}}сущностей: {{unk_list}}
            {%else%}{{"\U00002705"}}Все сущности определены!{%endif%}
        
        
  toilet_air_freshener_counter_reset:
    alias: Toilet Air Freshener Counter Reset
    sequence:
    # - service: counter.reset
    #   entity_id: counter.air_freshener_toilet
    - service: number.set_value
      entity_id: number.d1mini_air_freshener_counter
      data:
        value: 0
    - service: input_datetime.set_datetime
      entity_id: input_datetime.toilet_freshener_canister_replace_date
      data:
        date: "{{ now().strftime('%Y-%m-%d') }}"

  bathroom_fan_10m:
    alias: Bathroom fan 10m
    sequence:
    - service: switch.turn_on
      entity_id: switch.esp32_node_b_relay_3
    - delay: '00:10:00'
    - service: switch.turn_off
      entity_id: switch.esp32_node_b_relay_3
      
  breathers_full_blown:
    alias: Breathers Full Blown
    sequence:
      - choose:
          - conditions: 
              condition: state
              entity_id: binary_sensor.breather_v
              state: 'off'
            sequence:
              - service: button.press
                entity_id: button.digma_ir_v_breather_pwr
              - service: button.press
                entity_id: button.digma_ir_v_breather_up
              - delay: 00:00:02
              - service: button.press
                entity_id: button.digma_ir_v_breather_up
              - delay: 00:00:02
              - service: button.press
                entity_id: button.digma_ir_v_breather_up
      - choose:
          - conditions: 
              condition: state
              entity_id: binary_sensor.breather_mb
              state: 'off'
            sequence:
              - service: button.press
                entity_id: button.digma_ir_mb_breather_pwr
              - service: button.press
                entity_id: button.digma_ir_mb_breather_up
              - delay: 00:00:02
              - service: button.press
                entity_id: button.digma_ir_mb_breather_up
              - delay: 00:00:02
              - service: button.press
                entity_id: button.digma_ir_mb_breather_up
      - choose:
          - conditions: 
              condition: state
              entity_id: binary_sensor.breather_s
              state: 'off'
            sequence:
              - service: button.press
                entity_id: button.digma_ir_s_breather_pwr
              - service: button.press
                entity_id: button.digma_ir_s_breather_up
              - delay: 00:00:02
              - service: button.press
                entity_id: button.digma_ir_s_breather_up
              - delay: 00:00:02
              - service: button.press
                entity_id: button.digma_ir_s_breather_up
                
  # test_automation_off:
  #   sequence:
  #     - service: automation.turn_off
  #       entity_id:
  #         - automation.system_automation_error 
  #         - automation.system_critical_error_notify
  #         - automation.system_gw3_state
  #         - automation.system_zb_devices_status
  #         - automation.system_esp_devices_status
  #         - automation.system_already_running_log
  #         - automation.system_esp_reboot
  #         - automation.system_gw3_devices_msg_missed
  #         - automation.system_error_counter
  #         - automation.system_warning_counter
  #         - automation.system_new_device_found
  #         - automation.system_entity_change
  #         - automation.system_device_entity_deletion