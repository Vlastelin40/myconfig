substitutions:
  board_name: sonoff_4ch

esphome:
  name: ${board_name}
  platform: ESP8266
  board: esp01_1m
  on_boot:
    if:
      condition:
        wifi.connected:
      then:
        - light.turn_on: wifi_led
wifi:
  ssid: !secret wifi_ssid_k
  password: !secret wifi_pass
  domain: .localdomain
  reboot_timeout: 15min
  output_power: 17.5dB
  fast_connect: true
  power_save_mode: none
  manual_ip:
    static_ip: 192.168.1.116
    gateway: 192.168.1.1
    subnet: 255.255.255.0
  
logger:

api:
  reboot_timeout: 0s

web_server:
  port: 80

ota:

binary_sensor:
  - platform: status
    name: ${board_name}_Status

  - platform: gpio
    pin:
      number: GPIO0
      mode: INPUT_PULLUP
      inverted: True
    name: ${board_name}_Button_1
    on_press:
      - switch.toggle: 
          id: relay1
  - platform: gpio
    pin:
      number: GPIO9
      mode: INPUT_PULLUP
      inverted: True
    name: ${board_name}_Button_2
    on_press:
      - switch.toggle: 
          id: relay2
  - platform: gpio
    pin:
      number: GPIO10
      mode: INPUT_PULLUP
      inverted: True
    name: ${board_name}_Button_3
    on_press:
      - switch.toggle: 
          id: relay3
  - platform: gpio
    pin:
      number: GPIO14
      mode: INPUT_PULLUP
      inverted: True
    name: ${board_name}_Button_4
    on_press:
      - switch.toggle: 
          id: relay4
sensor:
  - platform: uptime
    name: ${board_name}_Uptime_s
    id: uptime_sensor

  - platform: wifi_signal
    name: ${board_name}_WiFi_RSSI
    update_interval: 60s
    
  # - platform: dht
  #   pin: GPIO02
  #   temperature:
  #     name: ${board_name}_Temperature
  #     unit_of_measurement: "Â°C"
  #     accuracy_decimals: 2
  #   humidity:
  #     name: ${board_name}_Humidity
  #     unit_of_measurement: "%"
  #     accuracy_decimals: 2
  #   update_interval: 30s
  #   model: AM2302

text_sensor:
  - platform: template
    name: ${board_name}_Uptime
    lambda: |-
      uint32_t dur = id(uptime_sensor).state;
      int dys = 0;
      int hrs = 0;
      int mnts = 0;
      if (dur > 86399) {
        dys = trunc(dur / 86400);
        dur = dur - (dys * 86400);
      }
      if (dur > 3599) {
        hrs = trunc(dur / 3600);
        dur = dur - (hrs * 3600);
      }
      if (dur > 59) {
        mnts = trunc(dur / 60);
        dur = dur - (mnts * 60);
      }
      char buffer[17];
      sprintf(buffer, "%ud %02uh %02um %02us", dys, hrs, mnts, dur);
      return {buffer};
    icon: mdi:clock-start
    update_interval: 15s



switch:
  - platform: restart
    name: ${board_name}_Restart

  - platform: gpio
    name: ${board_name}_Relay_1
    pin: GPIO12
    id: relay1
    #interlock: [relay2]
  - platform: gpio
    name: ${board_name}_Relay_2
    pin: GPIO5
    id: relay2
    #interlock: [relay1]
  - platform: gpio
    name: ${board_name}_Relay_3
    pin: GPIO4
    id: relay3
  - platform: gpio
    name: ${board_name}_Relay_4
    pin: GPIO15
    id: relay4

output:
  - platform: esp8266_pwm
    id: manual_status_led
    pin: 
      number: GPIO13
      inverted: false

light:
  - platform: monochromatic
    name: ${board_name}_Status_LED
    internal: true
    output: manual_status_led
    id: wifi_led

time:
  - platform: homeassistant
    id: homeassistant_time