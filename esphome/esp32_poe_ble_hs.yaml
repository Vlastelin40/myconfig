substitutions:
  board_name: esp32_poe_ble_hs
  node_name: esp32-poe-ble-hs
  up_int: 60s
  
esphome:
  name: ${node_name}
  comment: ESP32 POE BLE Tracker HS with Geiger Sensor
  # platformio_options:
  #   board_build.partitions: ../../../custom_components/partitions_esp32_4mb.csv
  libraries:
    - Wire
    - "climateguard/ClimateGuard RadSens"
  includes:
    - radsense/_CG_RadSens.h
    - radsense/CountsPerMinute.h


esp32:
  board: esp32doit-devkit-v1
  framework:
    type: arduino

external_components:
  - source: github://myhomeiot/esphome-components  

ethernet:
  type: IP101
  mdc_pin: GPIO23
  mdio_pin: GPIO18
  #clk_mode: GPIO17_OUT
  clk_mode: GPIO0_IN
  phy_addr: 1
  power_pin: GPIO5
  # manual_ip:
  #   static_ip: 192.168.1.110
  #   gateway: 192.168.1.1
  #   subnet: 255.255.255.0
  #   dns1: 192.168.1.1
  #   dns2: 8.8.8.8

logger:
#  baud_rate: 0

api:
  reboot_timeout: 0s

ota:
  
globals:
  - id: event_count
    type: unsigned int
    restore_value: no
    initial_value: '0'

i2c:
  sda: GPIO15
  scl: GPIO13
  scan: true

bluetooth_proxy:

esp32_ble_tracker:
  scan_parameters:
    interval: 1100ms
    window: 1100ms
    active: true

# dashboard_import:
#   package_import_url: github://esphome/bluetooth-proxies/esp32-generic.yaml@main

# web_server:
#   port: 80

ble_gateway:
  id: ${board_name}
  on_ble_advertise:
    then:
      - homeassistant.event:
          event: esphome.on_ble_advertise
          data:
            packet: !lambda return packet;
            gateway_id: ${board_name}
      - lambda: |-
          id(event_count) += 1;

binary_sensor:
  - platform: status
    name: ${board_name}_Status

  - platform: ble_presence
    mac_address: 7E:FE:3E:EC:59:FB
    name: ${board_name}_White
    device_class: presence

  - platform: ble_presence
    mac_address: 3B:EF:3E:DE:98:6B
    name: ${board_name}_Grey
    device_class: presence

  - platform: ble_presence
    mac_address: 2A:BC:3E:DC:57:65
    name: ${board_name}_Pink
    device_class: presence

  - platform: ble_presence
    mac_address: 6B:9C:3E:D1:C5:9A
    name: ${board_name}_Green
    device_class: presence

  - platform: gpio
    pin: 
      number: GPIO33
      inverted: true
    name: ${board_name}_Reset Button

output:
  - platform: gpio
    pin: GPIO14
    inverted: true
    id: power_led
    
  - platform: gpio
    pin: GPIO12
    inverted: true
    id: bluetooth_led

  - platform: gpio
    pin: GPIO32
    inverted: true
    id: status_led

sensor:
  - platform: uptime
    name: ${board_name}_Uptime_s
    id: uptime_sensor
    update_interval: 15s

  - platform: template
    name: ${board_name}_Events
    lambda: |-
      return id(event_count);
    update_interval: ${up_int}
    icon: mdi:cube-send
    unit_of_measurement: 'event'
    accuracy_decimals: 0

  - platform: custom
    lambda: |-
      auto rad_sens = new MyRadSens();
      App.register_component(rad_sens);
      return {rad_sens->IntensityDynamic_Sensor,rad_sens->IntensityStatic_Sensor, rad_sens->CurrentCPM_Sensor, rad_sens->MaxCPM_Sensor,rad_sens->Sensivity_Sensor};
    sensors:
      - name: ${board_name}_Dynamic intensity
        id: dynamic_intensity
        accuracy_decimals: 1
        unit_of_measurement: μR/h
      - name: ${board_name}_Static intensity
        accuracy_decimals: 1
        unit_of_measurement: μR/h
      - name: ${board_name}_Current CPM
        accuracy_decimals: 1
        unit_of_measurement: CPM
      - name: ${board_name}_Max CPM
        accuracy_decimals: 1
        unit_of_measurement: CPM
      - name: ${board_name}_Sensivity
        id: sensivity
        state_class: measurement
        entity_category: diagnostic


text_sensor:
  - platform: template
    name: ${board_name}_Uptime
    lambda: |-
        int seconds = round(id(uptime_sensor).raw_state);
        int days = seconds / (24 * 3600);
        seconds = seconds % (24 * 3600);
        int hours = seconds / 3600;
        seconds = seconds % 3600;
        int minutes = seconds /  60;
        seconds = seconds % 60;
        return (
          (days ? to_string(days) + "d " : "00d ") +
          (hours ? to_string(hours) + "h " : "00h ") +
          (minutes ? to_string(minutes) + "m " : "00m ") +
          (to_string(seconds) + "s")
        );
    icon: mdi:clock-start
    update_interval: 15s

  - platform: homeassistant
    id: ble_gateway_devices
    entity_id: binary_sensor.ble_gateway
    attribute: devices
    on_value:
      then:
        - lambda: id(${board_name}).set_devices(x);

  - platform: ethernet_info
    ip_address:
      name: ${board_name}_IP

  - platform: version
    name: ${board_name}_ESPHome_Version
    hide_timestamp: true

button:
  - platform: restart
    name: ${board_name}_Restart

time:
  - platform: sntp
    id: sntp_time
    timezone: Europe/Moscow

interval:
  - interval: ${up_int}
    then:
      - lambda: |-
          static bool flag = false;
          auto min = id(sntp_time).now().minute;
          if (min == 59 && !flag)
          {
            id(event_count) = 0;
            flag = true;
          }
          else
          {
            flag = false;
          }