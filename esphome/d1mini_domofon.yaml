substitutions:
  board_name: d1mini_domofon
 
esphome:
  name: ${board_name}
  platform: ESP8266
  board: d1_mini
  comment: D1 Mini Domofon

wifi:
  ssid: !secret wifi_ssid_hb
  password: !secret wifi_pass
  domain: .local
  reboot_timeout: 15min
  #output_power: 17.5dB
  fast_connect: true
  #power_save_mode: none
  manual_ip:
    static_ip: 192.168.1.81
    gateway: 192.168.1.1
    subnet: 255.255.255.0
    dns1: 192.168.1.1
    dns2: 8.8.8.8
    
logger:
  baud_rate: 0

api:
  reboot_timeout: 0min
  # services:
  #   - service: accept_call
  #     then:
  #       - logger.log: "Call service 'Accept Call'"
  #       - if:
  #           condition:
  #             binary_sensor.is_on: incoming_call
  #           then: 
  #             lambda: |-
  #               if (id(mute_mode)) { id(call_accept_mute).execute(); 
  #               }else { id(call_accept).execute();
  #               }
  #           else:
  #             logger.log: "No incoming call"

  #   - service: reject_call
  #     then:
  #       - logger.log: "Call service 'Reject Call'"
  #       - if:
  #           condition:
  #             binary_sensor.is_on: incoming_call
  #           then:
  #             script.execute: call_reject
  #           else:
  #             logger.log: "No incoming call"  

ota:

web_server:
  port: 80

globals:
  - id: mute_mode
    type: bool
    initial_value: 'false'
  - id: opening
    type: bool
    initial_value: 'false'

script:
  # Accept incoming call
  - id: call_accept
    then:
      - globals.set:
          id: opening
          value: 'true'      
      - logger.log: "Accept call"
      - script.execute: state_no_call
      - switch.turn_on: id_phone
      - delay: 1s
      - switch.turn_on: id_open
      - delay: 1s
      - switch.turn_on: id_open
      - delay: 1s      
      - switch.turn_off: id_open      
      - switch.turn_off: id_phone
      - globals.set:
          id: opening
          value: 'false'

  - id: call_accept_mute
    then:
      - globals.set:
          id: opening
          value: 'true'      
      - logger.log: "Accept call_mute"
      - script.execute: state_no_call
      - switch.turn_on: id_mute
      - switch.turn_on: id_phone
      - switch.turn_on: id_headset_mute
      - delay: 1s
      - switch.turn_on: id_open
      - delay: 1s
      - switch.turn_on: id_open
      - delay: 1s
      - switch.turn_off: id_open
      - switch.turn_off: id_phone
      - switch.turn_off: id_mute
      - switch.turn_off: id_headset_mute
      - globals.set:
          id: opening
          value: 'false'
          
  - id: call_accept_manual
    then:
      - logger.log: "Accept call_manual"
      - script.execute: state_no_call
      - switch.turn_on: id_mute
      - switch.turn_on: id_phone
      - switch.turn_on: id_headset_mute
      - delay: 1s
      - switch.turn_on: id_open
      - delay: 1s
      - switch.turn_on: id_open
      - delay: 1s
      - switch.turn_off: id_open
      - switch.turn_off: id_phone
      - switch.turn_off: id_mute
      - switch.turn_off: id_headset_mute

  - id: call_reject
    then:
      - logger.log: "Reject call"
      - script.execute: state_no_call
      - switch.turn_on: id_mute
      - switch.turn_on: id_headset_mute
      - switch.turn_on: id_phone
      - delay: 3s
      - switch.turn_off: id_phone
      - switch.turn_off: id_mute
      - switch.turn_off: id_headset_mute

  # No call state
  - id: state_no_call
    then:
      - logger.log: "Set state 'No call'"
      - script.execute: led_off
      - if:
          condition:
            switch.is_on: auto_open_once
          then:
            script.execute: led_green_soft
      - if:
          condition:
            switch.is_on: auto_open
          then:
            script.execute: led_green_on
      - if:
          condition:
            switch.is_on: auto_reject
          then:
            script.execute: led_red_on_soft
      - if:
          condition:
            and:
              - switch.is_on: mute
              - switch.is_off: auto_open_once
              - switch.is_off: auto_open
          then:
            script.execute: led_blue_on_soft
      - if:
          condition:
            and:
              - switch.is_off: auto_open_once
              - switch.is_off: auto_open
              - switch.is_off: auto_reject
          then:
            script.execute: led_off

  # Call state
  - id: state_call
    then:
      - logger.log: "Set state 'Incoming call'"
      - script.execute: led_off
      - if:
          condition:
            and:
              - switch.is_off: auto_open
              - switch.is_off: auto_open_once
              - switch.is_off: auto_reject
              - switch.is_on: mute
          then:
            script.execute: led_red_on
      - if:
          condition:
            switch.is_on: auto_reject
          then:
            script.execute: call_reject
      - if:
          condition:
            switch.is_on: auto_open
          then:
            script.execute: call_accept
      - if:
          condition:
            switch.is_on: auto_open_once
          then:
            - script.execute: call_accept
            # - lambda: |-
            #     if (id(mute_mode)) { id(call_accept_mute).execute(); 
            #     }else { id(call_accept).execute();
            #     }          
            - delay: 1s
            - switch.turn_off: auto_open_once

  # Turn off leds
  - id: led_off
    then:
      #- light.turn_off: id_led1
      #- light.turn_off: id_led2
      #- light.turn_off: id_led3
      - if:
          condition:
            switch.is_on: mute
          then:
            light.turn_on: 
              id: id_led1
              brightness: 50%
              red: 0%
              green: 0%
              blue: 100%

  # blink green led
  - id: led_green_soft
    then:
      light.turn_on:
        id: id_led1
        brightness: 30%
        red: 0%
        green: 100%
        blue: 0%
        effect: "Blink"

  # blink red led
  - id: led_red_on_soft
    then:
      light.turn_on:
          id: id_led1
          brightness: 30%
          red: 100%
          green: 0%
          blue: 0%
          effect: "Blink"

  # blink blue led
  - id: led_blue_on_soft
    then:
      light.turn_on:
        id: id_led1
        brightness: 30%
        red: 0%
        green: 0%
        blue: 100%
        effect: "Blink"

  # blue led on
  - id: led_blue_on
    then:
      light.turn_on:
        id: id_led1
        brightness: 50%
        red: 0%
        green: 0%
        blue: 100%

  # green led on
  - id: led_green_on
    then:
      light.turn_on:
        id: id_led1
        brightness: 50%
        red: 0%
        green: 100%
        blue: 0%

  # red led on
  - id: led_red_on
    then:
      light.turn_on:
        id: id_led1
        brightness: 50%
        red: 100%
        green: 0%
        blue: 0%

binary_sensor:
  - platform: status
    name: ${board_name}_Status
    
  - platform: gpio
    pin: 
      number: GPIO14
      mode: INPUT_PULLUP
      inverted: True
    name: ${board_name}_IncomingCall
    device_class: sound
    id: incoming_call
    filters:
      - delayed_on: 1s
      - delayed_off: 3s
    on_press:
      then:
        - script.execute: state_call
    on_release:
      then:
        - script.execute: state_no_call      

  - platform: template
    name: ${board_name}_Auto_Opening
    lambda: |-
      if (id(opening)) { return true;
      }else { return false;
      }

  - platform: gpio
    name: ${board_name}_Button
    pin: 
      number: GPIO15
      #inverted: true
    filters:
      - delayed_on: 30ms
      - delayed_off: 30ms         
    on_press:
      then:
        #- switch.turn_on: manual_open
        - script.execute: call_accept_manual

light:
  - platform: fastled_clockless
    chipset: WS2812B
    pin: GPIO13
    num_leds: 1
    rgb_order: GRB
    name: ${board_name}_LED
    id: id_led1
    effects:
      - automation:
          name: "Blink"
          sequence:
            - light.turn_on:
                id: id_led1
                brightness: 50%
                transition_length: 500ms
            - delay: 1000ms
            - light.turn_on:
                id: id_led1
                brightness: 1%
                transition_length: 300ms
            - delay: 500ms
      - automation:
          name: "Blink Fast"
          sequence:
            - light.turn_on:
                id: id_led1
                brightness: 50%
                transition_length: 50ms
            - delay: 450ms
            - light.turn_on:
                id: id_led1
                brightness: 1%
                transition_length: 50ms
            - delay: 450ms
      - automation:
          name: "Half"
          sequence:
            - light.turn_on:
                id: id_led1
                brightness: 50%
                transition_length: 50ms    

  # - platform: partition
  #   name: ${board_name}_LED_1
  #   id: id_led1
  #   segments:
  #     - id: light1
  #       from: 0
  #       to: 0
    # effects:
    #   - automation:
    #       name: "Blink"
    #       sequence:
    #         - light.turn_on:
    #             id: id_led1
    #             brightness: 50%
    #             transition_length: 500ms
    #         - delay: 1000ms
    #         - light.turn_on:
    #             id: id_led1
    #             brightness: 1%
    #             transition_length: 300ms
    #         - delay: 500ms
    #   - automation:
    #       name: "Blink Fast"
    #       sequence:
    #         - light.turn_on:
    #             id: id_led1
    #             brightness: 50%
    #             transition_length: 50ms
    #         - delay: 450ms
    #         - light.turn_on:
    #             id: id_led1
    #             brightness: 1%
    #             transition_length: 50ms
    #         - delay: 450ms
    #   - automation:
    #       name: "Half"
    #       sequence:
    #         - light.turn_on:
    #             id: id_led1
    #             brightness: 50%
    #             transition_length: 50ms        

  # - platform: partition
  #   name: ${board_name}_LED_2
  #   id: id_led2
  #   segments:
  #     - id: light1
  #       from: 1
  #       to: 1
  #   effects:
  #     - automation:
  #         name: "Blink"
  #         sequence:
  #           - light.turn_on:
  #               id: id_led2
  #               brightness: 50%
  #               transition_length: 500ms
  #           - delay: 1000ms
  #           - light.turn_on:
  #               id: id_led2
  #               brightness: 1%
  #               transition_length: 300ms
  #           - delay: 500ms
  #     - automation:
  #         name: "Blink Fast"
  #         sequence:
  #           - light.turn_on:
  #               id: id_led2
  #               brightness: 50%
  #               transition_length: 50ms
  #           - delay: 450ms
  #           - light.turn_on:
  #               id: id_led2
  #               brightness: 1%
  #               transition_length: 50ms
  #           - delay: 450ms
  #     - automation:
  #         name: "Half"
  #         sequence:
  #           - light.turn_on:
  #               id: id_led2
  #               brightness: 50%
  #               transition_length: 50ms        

  # - platform: partition
  #   name: ${board_name}_LED_3
  #   id: id_led3
  #   segments:
  #     - id: light1
  #       from: 2
  #       to: 2      
  #   effects:
  #     - automation:
  #         name: "Blink"
  #         sequence:
  #           - light.turn_on:
  #               id: id_led3
  #               brightness: 50%
  #               transition_length: 500ms
  #           - delay: 1000ms
  #           - light.turn_on:
  #               id: id_led3
  #               brightness: 1%
  #               transition_length: 300ms
  #           - delay: 500ms
  #     - automation:
  #         name: "Blink Fast"
  #         sequence:
  #           - light.turn_on:
  #               id: id_led3
  #               brightness: 50%
  #               transition_length: 50ms
  #           - delay: 450ms
  #           - light.turn_on:
  #               id: id_led3
  #               brightness: 1%
  #               transition_length: 50ms
  #           - delay: 450ms
  #     - automation:
  #         name: "Half"
  #         sequence:
  #           - light.turn_on:
  #               id: id_led3
  #               brightness: 50%
  #               transition_length: 50ms                

text_sensor:
  - platform: template
    name: ${board_name}_Uptime
    lambda: |-
      uint32_t dur = id(uptime_sensor).state;
      int dys = 0;
      int hrs = 0;
      int mnts = 0;
      if (dur > 86399) {
        dys = trunc(dur / 86400);
        dur = dur - (dys * 86400);
      }
      if (dur > 3599) {
        hrs = trunc(dur / 3600);
        dur = dur - (hrs * 3600);
      }
      if (dur > 59) {
        mnts = trunc(dur / 60);
        dur = dur - (mnts * 60);
      }
      char buffer[17];
      sprintf(buffer, "%ud %02uh %02um %02us", dys, hrs, mnts, dur);
      return {buffer};
    icon: mdi:clock-start
    update_interval: 15s

sensor:
  - platform: uptime
    name: ${board_name}_Uptime_s
    id: uptime_sensor
    update_interval: 15s

  - platform: wifi_signal
    name: ${board_name}_WiFi_RSSI
    update_interval: 60s    

switch:
  - platform: restart
    name: ${board_name}_Restart

  # - platform: template
  #   name: ${board_name}_Auto_Mode
  #   icon: mdi:arrow-decision-auto
  #   id: auto_mode_switch
  #   lambda: |-
  #     if (id(auto_mode).state) {
  #       return true;
  #     } else {
  #       return false;
  #     }
  #   on_turn_on:
  #     - globals.set:
  #         id: auto_mode
  #         value: 'true'
  #   on_turn_off:
  #     - globals.set:
  #         id: auto_mode
  #         value: 'false'

  - platform: gpio
    pin: GPIO12
    name: ${board_name}_Mute_Pin
    icon: mdi:volume-off
    id: id_mute

  - platform: gpio
    pin: GPIO05
    name: ${board_name}_Phone_Pin
    icon: mdi:phone
    id: id_phone

  - platform: gpio
    pin: GPIO04
    name: ${board_name}_Open_Pin
    icon: mdi:door-open
    id: id_open
    on_turn_on:
      - delay: 1s
      - switch.turn_off: id_open

  - platform: gpio
    pin: GPIO00
    name: ${board_name}_Headset_Mute_Pin
    icon: mdi:headset-off
    id: id_headset_mute

  - platform: template
    name: ${board_name}_Open
    icon: mdi:door
    turn_on_action:
      - script.execute: call_accept_mute

  - platform: template
    name: ${board_name}_Open_Manual
    icon: mdi:hand-front-right
    id: manual_open
    turn_on_action:
      - script.execute: call_accept_manual
      
  - platform: template
    name: ${board_name}_Auto_Open
    id: auto_open
    icon: mdi:check-all
    optimistic: true
    restore_state: true
    on_turn_on:
      - switch.turn_off: auto_open_once
      - switch.turn_off: auto_reject
      - script.execute: state_no_call
    on_turn_off:
      script.execute: state_no_call

  # Automatically open door once switch
  - platform: template
    name: ${board_name}_Auto_Open_Once
    id: auto_open_once
    icon: mdi:check
    optimistic: true
    restore_state: true
    on_turn_on:
      - switch.turn_off: auto_open
      - switch.turn_off: auto_reject
      - script.execute: state_no_call
    on_turn_off:
      script.execute: state_no_call

  # Automatically reject call switch
  - platform: template
    name: ${board_name}_Reject
    id: auto_reject
    icon: mdi:door-closed-lock
    optimistic: true
    restore_state: true
    on_turn_on:
      - switch.turn_off: auto_open
      - switch.turn_off: auto_open_once
      - script.execute: state_no_call
    on_turn_off:
      script.execute: state_no_call
      
  - platform: template
    name: ${board_name}_Mute
    id: mute
    icon: mdi:volume-off
    optimistic: true
    restore_state: true
    on_turn_on:
      - globals.set:
          id: mute_mode
          value: 'true'
      - switch.turn_on: id_mute
      # - light.turn_on: 
      #     id: id_led3
      #     brightness: 50%
      #     red: 0%
      #     green: 0%
      #     blue: 100%
      #     effect: "Blink"
    on_turn_off:
      - globals.set:
          id: mute_mode
          value: 'false'
      - switch.turn_off: id_mute
      - light.turn_off: 
          id: id_led1

time:
  - platform: homeassistant
    id: homeassistant_time
  - platform: sntp
    id: sntp_time
    timezone: UTC-3